toplevel: FORMAT LBRACE DECO ID LPAREN UID COLON ID COMMA INCLUDE
##
## Ends in an error in state: 328.
##
## separated_nonempty_list(COMMA,deco_arg) -> deco_arg COMMA . separated_nonempty_list(COMMA,deco_arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## deco_arg COMMA
##

Unterminated attribute specification: a key is expected after the ','.

toplevel: FORMAT LBRACE DECO ID LPAREN UID COLON ID EQ ID INCLUDE
##
## Ends in an error in state: 327.
##
## separated_nonempty_list(COMMA,deco_arg) -> deco_arg . [ RPAREN ]
## separated_nonempty_list(COMMA,deco_arg) -> deco_arg . COMMA separated_nonempty_list(COMMA,deco_arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## deco_arg
##

Unterminated keys in attribute specification: perhaps you forgot a ')'?

toplevel: FORMAT LBRACE DECO ID LPAREN UID COLON ID EQ INCLUDE
##
## Ends in an error in state: 325.
##
## deco_arg -> ident EQ . ident [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Unterminated attribute key assignment: a key value is expected after a '='.

toplevel: FORMAT LBRACE DECO ID LPAREN UID COLON ID INCLUDE
##
## Ends in an error in state: 324.
##
## deco_arg -> ident . EQ ident [ RPAREN COMMA ]
## deco_arg -> ident . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Unterminated keys in attribute specification: perhaps you forgot a ')'?

toplevel: FORMAT LBRACE DECO ID LPAREN UID COLON RPAREN INCLUDE
##
## Ends in an error in state: 330.
##
## separated_nonempty_list(SEMICOLON,deco_spec) -> deco_spec . [ RBRACK ]
## separated_nonempty_list(SEMICOLON,deco_spec) -> deco_spec . SEMICOLON separated_nonempty_list(SEMICOLON,deco_spec) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## deco_spec
##

Unterminated keys in attribute specification (omit the colon (:) to specify no keys).

toplevel: FORMAT LBRACE DECO ID LPAREN UID COLON INCLUDE
##
## Ends in an error in state: 320.
##
## deco_spec -> ident LPAREN def COLON . loption(separated_nonempty_list(COMMA,deco_arg)) RPAREN [ SEMICOLON RBRACK ]
##
## The known suffix of the stack is as follows:
## ident LPAREN def COLON
##

Unterminated keys in attribute specification (omit the colon (:) to specify no keys).

toplevel: FORMAT LBRACE DECO ID LPAREN UID RPAREN INCLUDE
##
## Ends in an error in state: 318.
##
## deco_spec -> ident LPAREN def RPAREN . RBRACK [ SEMICOLON RBRACK ]
##
## The known suffix of the stack is as follows:
## ident LPAREN def RPAREN
##

Unterminated attribute specification: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE DECO ID LPAREN UID INCLUDE
##
## Ends in an error in state: 317.
##
## deco_spec -> ident LPAREN def . COLON loption(separated_nonempty_list(COMMA,deco_arg)) RPAREN [ SEMICOLON RBRACK ]
## deco_spec -> ident LPAREN def . RPAREN RBRACK [ SEMICOLON RBRACK ]
##
## The known suffix of the stack is as follows:
## ident LPAREN def
##

Unterminated keys in attribute specification.

toplevel: FORMAT LBRACE DECO ID LPAREN INCLUDE
##
## Ends in an error in state: 315.
##
## deco_spec -> ident LPAREN . def COLON loption(separated_nonempty_list(COMMA,deco_arg)) RPAREN [ SEMICOLON RBRACK ]
## deco_spec -> ident LPAREN . def RPAREN RBRACK [ SEMICOLON RBRACK ]
##
## The known suffix of the stack is as follows:
## ident LPAREN
##

Unterminated attribute specification: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE DECO ID INCLUDE
##
## Ends in an error in state: 314.
##
## deco_spec -> ident . LPAREN def COLON loption(separated_nonempty_list(COMMA,deco_arg)) RPAREN [ SEMICOLON RBRACK ]
## deco_spec -> ident . LPAREN def RPAREN RBRACK [ SEMICOLON RBRACK ]
##
## The known suffix of the stack is as follows:
## ident
##

Unspecified primary key in attribute specification.

toplevel: FORMAT LBRACE DECO INCLUDE
##
## Ends in an error in state: 310.
##
## deco_decl -> DECO . loption(separated_nonempty_list(SEMICOLON,deco_spec)) RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## DECO
##

An attribute name is expected in an attribute specification.

toplevel: FORMAT LBRACE UID COLONEQ AT_VIEW LITERAL COMMA UID UID
##
## Ends in an error in state: 512.
##
## rule_elem -> rule_elem . BAR rule_elem [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . STAR [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . CARET expr [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . PLUS [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . QUESTION [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> AT_VIEW expr COMMA rule_elem . RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_VIEW expr COMMA rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 349, spurious reduction of production option(nt_args) ->
## In state 371, spurious reduction of production rule_elem -> UID option(nt_args)
##

A view-restricted parse can only be applied to a single rule element: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE UID COLONEQ AT_VIEW LITERAL COMMA INCLUDE
##
## Ends in an error in state: 487.
##
## rule_elem -> AT_VIEW expr COMMA . rule_elem RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_VIEW expr COMMA
##

A view-restricted parse requires a rule element to follow the ',' after the position expression.

toplevel: FORMAT LBRACE UID COLONEQ AT_VIEW LITERAL INCLUDE
##
## Ends in an error in state: 486.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## rule_elem -> AT_VIEW expr . COMMA rule_elem RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_VIEW expr
##

A view-restricted parse requires a ',' to follow the position expression.

toplevel: FORMAT LBRACE UID COLONEQ AT_VIEW INCLUDE
##
## Ends in an error in state: 485.
##
## rule_elem -> AT_VIEW . expr COMMA rule_elem RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_VIEW
##

A position expression is expected for the view-restricted parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP LITERAL COMMA UID UID
##
## Ends in an error in state: 498.
##
## rule_elem -> rule_elem . BAR rule_elem [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . STAR [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . CARET expr [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . PLUS [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . QUESTION [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> AT_MAP expr COMMA rule_elem . RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_MAP expr COMMA rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 349, spurious reduction of production option(nt_args) ->
## In state 371, spurious reduction of production rule_elem -> UID option(nt_args)
##

A view-restricted parse can only be applied to a single rule element: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP LITERAL COMMA INCLUDE
##
## Ends in an error in state: 493.
##
## rule_elem -> AT_MAP expr COMMA . rule_elem RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_MAP expr COMMA
##

A rule-element is expected after the ',' for the view-restricted parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP LITERAL INCLUDE
##
## Ends in an error in state: 492.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## rule_elem -> AT_MAP expr . COMMA rule_elem RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_MAP expr
##

Ill-formed view-map restricted parse: perhaps you forgot a ',' after the view expression?

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP INCLUDE
##
## Ends in an error in state: 491.
##
## rule_elem -> AT_MAP . expr COMMA rule_elem RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_MAP
##

A position expression is expected for the view-restricted parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_POS LITERAL COMMA UID UID
##
## Ends in an error in state: 510.
##
## rule_elem -> rule_elem . BAR rule_elem [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . STAR [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . CARET expr [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . PLUS [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . QUESTION [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> AT_POS expr COMMA rule_elem . RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_POS expr COMMA rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 349, spurious reduction of production option(nt_args) ->
## In state 371, spurious reduction of production rule_elem -> UID option(nt_args)
##

Ill-formed positioned parse: perhaps you forgot a ']' after the parsing rule?

toplevel: FORMAT LBRACE UID COLONEQ AT_POS LITERAL COMMA INCLUDE
##
## Ends in an error in state: 490.
##
## rule_elem -> AT_POS expr COMMA . rule_elem RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_POS expr COMMA
##

A rule element is expected after the ',' in the positioned parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_POS LITERAL INCLUDE
##
## Ends in an error in state: 489.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## rule_elem -> AT_POS expr . COMMA rule_elem RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_POS expr
##

Ill-formed positioned parse: perhaps you forgot a ',' after the position expression?

toplevel: FORMAT LBRACE UID COLONEQ AT_POS INCLUDE
##
## Ends in an error in state: 488.
##
## rule_elem -> AT_POS . expr COMMA rule_elem RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## AT_POS
##

A position expression is expected for a positioned parse.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL BAR LITERAL INCLUDE
##
## Ends in an error in state: 386.
##
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . BAR separated_nonempty_list(BAR,LITERAL) [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL
##

Invalid separator in literal set: perhaps you forgot a '|'?

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL BAR INCLUDE
##
## Ends in an error in state: 385.
##
## separated_nonempty_list(BAR,LITERAL) -> LITERAL BAR . separated_nonempty_list(BAR,LITERAL) [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL BAR
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL DOTDOT INCLUDE
##
## Ends in an error in state: 383.
##
## literal_set -> LITERAL DOTDOT . LITERAL [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL DOTDOT
##

Ill-formed literal used to terminate literal range.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL INCLUDE
##
## Ends in an error in state: 382.
##
## literal_set -> LITERAL . DOTDOT LITERAL [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . BAR separated_nonempty_list(BAR,LITERAL) [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL
##

Ill-formed literal in literal set: perhaps you forgot a separator like '..', '|' or '\', or a terminator like ']'?

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LPAREN INCLUDE
##
## Ends in an error in state: 381.
##
## literal_set -> LPAREN . literal_set RPAREN [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM UID BACKSLASH INCLUDE
##
## Ends in an error in state: 391.
##
## literal_set -> literal_set BACKSLASH . literal_set [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## literal_set BACKSLASH
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM INCLUDE
##
## Ends in an error in state: 479.
##
## rule_elem -> EXCLAIM . list(literal_set) EXCLAIM [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## EXCLAIM
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ ID EQ EPSILON INCLUDE
##
## Ends in an error in state: 509.
##
## rule_elem -> rule_elem . BAR rule_elem [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . STAR [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . CARET expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> ident EQ rule_elem . [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . PLUS [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . QUESTION [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## ident EQ rule_elem
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ ID EQ INCLUDE
##
## Ends in an error in state: 508.
##
## rule_elem -> ident EQ . rule_elem [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ ID INCLUDE
##
## Ends in an error in state: 507.
##
## rule_elem -> ident . EQ rule_elem [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ ID RPAREN
##
## Ends in an error in state: 449.
##
## separated_nonempty_list(SEMICOLON,stmt) -> stmt . [ SEMISEMI RBRACE ]
## separated_nonempty_list(SEMICOLON,stmt) -> stmt . SEMICOLON separated_nonempty_list(SEMICOLON,stmt) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
## In state 460, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr
##

Ill-formed rhs expression in action statement: perhaps you forgot a ';' or ';;' or a terminating '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ ID SEMICOLON INCLUDE
##
## Ends in an error in state: 450.
##
## separated_nonempty_list(SEMICOLON,stmt) -> stmt SEMICOLON . separated_nonempty_list(SEMICOLON,stmt) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt SEMICOLON
##

Ill-formed lhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ LITERAL INCLUDE
##
## Ends in an error in state: 460.
##
## expr -> expr . DOT ident [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LAND expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LOR expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . BAR_B expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . AND_B expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . PLUS expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . AT expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . MINUS expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . STAR expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . MOD expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . DIV expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LT expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . GT expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LTEQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . GTEQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . EQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . NEQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## stmt -> assign_lhs_expr COLONEQ expr . [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr COLONEQ expr
##

Ill-formed rhs expression in action statement: perhaps you forgot a ';' or ';;' or a terminating '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ INCLUDE
##
## Ends in an error in state: 459.
##
## stmt -> assign_lhs_expr COLONEQ . expr [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr COLONEQ
##

Ill-formed rhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID DOT INCLUDE
##
## Ends in an error in state: 457.
##
## assign_lhs_expr -> assign_lhs_expr DOT . ident [ LBRACK DOT COLONEQ ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr DOT
##

Ill-formed record field or attribute in lhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID LBRACK LITERAL INCLUDE
##
## Ends in an error in state: 455.
##
## assign_lhs_expr -> assign_lhs_expr LBRACK expr . RBRACK [ LBRACK DOT COLONEQ ]
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr LBRACK expr
##

Ill-formed index expression in lhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID LBRACK INCLUDE
##
## Ends in an error in state: 454.
##
## assign_lhs_expr -> assign_lhs_expr LBRACK . expr RBRACK [ LBRACK DOT COLONEQ ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr LBRACK
##

Ill-formed lhs expression in action statement: expected an index expression after '['.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID INCLUDE
##
## Ends in an error in state: 453.
##
## assign_lhs_expr -> assign_lhs_expr . DOT ident [ LBRACK DOT COLONEQ ]
## assign_lhs_expr -> assign_lhs_expr . LBRACK expr RBRACK [ LBRACK DOT COLONEQ ]
## stmt -> assign_lhs_expr . COLONEQ expr [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr
##

Ill-formed lhs expression in action statement: perhaps you forgot a '.', '[' or a ':='?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL IN LBRACE ID COLONEQ ID SEMISEMI
##
## Ends in an error in state: 462.
##
## stmt -> LET pattern EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) . RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
## In state 460, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr
## In state 449, spurious reduction of production separated_nonempty_list(SEMICOLON,stmt) -> stmt
## In state 461, spurious reduction of production loption(separated_nonempty_list(SEMICOLON,stmt)) -> separated_nonempty_list(SEMICOLON,stmt)
##

Unterminated record expression: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL IN LBRACE INCLUDE
##
## Ends in an error in state: 448.
##
## stmt -> LET pattern EQ expr IN LBRACE . loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN LBRACE
##

Ill-formed statement: expected a statement in statement block.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL IN INCLUDE
##
## Ends in an error in state: 447.
##
## stmt -> LET pattern EQ expr IN . stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern EQ expr IN . LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN
##

Ill-formed body for 'let' statement: expected a statement or a statement block.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL INCLUDE
##
## Ends in an error in state: 446.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## stmt -> LET pattern EQ expr . IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern EQ expr . IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr
##

Ill-formed let statement: error in either the rhs of the binding, or there is a missing 'in' following the rhs of the binding.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ INCLUDE
##
## Ends in an error in state: 445.
##
## stmt -> LET pattern EQ . expr IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern EQ . expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ
##

Ill-formed rhs of the binding in the let statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE INCLUDE
##
## Ends in an error in state: 444.
##
## pattern -> pattern . COLONCOLON pattern [ EQ COLONCOLON ]
## stmt -> LET pattern . EQ expr IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern . EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern
##

A let binding pattern is followed by '='.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET INCLUDE
##
## Ends in an error in state: 443.
##
## stmt -> LET . pattern EQ expr IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET . pattern EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET
##

Ill-formed let binding pattern.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF BAR INCLUDE
##
## Ends in an error in state: 439.
##
## stmt -> LPAREN CASE expr OF option(BAR) . loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF option(BAR)
##

Ill-formed branch pattern in case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW ID COLONEQ ID BAR INCLUDE
##
## Ends in an error in state: 472.
##
## separated_nonempty_list(BAR,branchstmt) -> branchstmt BAR . separated_nonempty_list(BAR,branchstmt) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## branchstmt BAR
##

Ill-formed branch pattern in case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW ID COLONEQ ID SEMISEMI
##
## Ends in an error in state: 471.
##
## separated_nonempty_list(BAR,branchstmt) -> branchstmt . [ RPAREN ]
## separated_nonempty_list(BAR,branchstmt) -> branchstmt . BAR separated_nonempty_list(BAR,branchstmt) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## branchstmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
## In state 460, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr
## In state 468, spurious reduction of production branchstmt -> pattern ARROW stmt
##

Unterminated 'case' expression: perhaps you forgot a ')' terminator?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW LBRACE ID COLONEQ ID SEMISEMI
##
## Ends in an error in state: 466.
##
## branchstmt -> pattern ARROW LBRACE separated_nonempty_list(SEMICOLON,stmt) . RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW LBRACE separated_nonempty_list(SEMICOLON,stmt)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
## In state 460, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr
## In state 449, spurious reduction of production separated_nonempty_list(SEMICOLON,stmt) -> stmt
##

Unterminated branch statement block in case statement: perhaps you forgot a terminating '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW LBRACE INCLUDE
##
## Ends in an error in state: 465.
##
## branchstmt -> pattern ARROW LBRACE . separated_nonempty_list(SEMICOLON,stmt) RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW LBRACE
##

Ill-formed branch statement block: expected a statement after the '{'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW INCLUDE
##
## Ends in an error in state: 442.
##
## branchstmt -> pattern ARROW . stmt [ RPAREN BAR ]
## branchstmt -> pattern ARROW . LBRACE separated_nonempty_list(SEMICOLON,stmt) RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Ill-formed branch in case statement: expected a statement or statement block after the '->'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE INCLUDE
##
## Ends in an error in state: 441.
##
## branchstmt -> pattern . ARROW stmt [ RPAREN BAR ]
## branchstmt -> pattern . ARROW LBRACE separated_nonempty_list(SEMICOLON,stmt) RBRACE [ RPAREN BAR ]
## pattern -> pattern . COLONCOLON pattern [ COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed branch in case statement: perhaps you forgot a '->'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF INCLUDE
##
## Ends in an error in state: 438.
##
## stmt -> LPAREN CASE expr OF . option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF
##

Ill-formed pattern in branch of case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL INCLUDE
##
## Ends in an error in state: 437.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## stmt -> LPAREN CASE expr . OF option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr
##

Ill-formed scrutinee expression in case statement: perhaps you forgot an 'of' after the scrutinee?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE INCLUDE
##
## Ends in an error in state: 436.
##
## stmt -> LPAREN CASE . expr OF option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE
##

Ill-formed scrutinee expression in case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN INCLUDE
##
## Ends in an error in state: 435.
##
## stmt -> LPAREN . CASE expr OF option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed statement: expected a 'case' to follow the '('.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE SEMISEMI LITERAL INCLUDE
##
## Ends in an error in state: 476.
##
## action -> loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI expr . [ RBRACE ]
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI expr
##

Ill-formed return expression in action: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE SEMISEMI INCLUDE
##
## Ends in an error in state: 475.
##
## action -> loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI . expr [ RBRACE ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI
##

Ill-formed return expression in action.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE INCLUDE
##
## Ends in an error in state: 430.
##
## rule_elem -> LBRACE . action RBRACE [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed statement in action.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK CONSTR LPAREN INCLUDE
##
## Ends in an error in state: 136.
##
## expr -> CONSTR LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## CONSTR LPAREN
##

Ill-formed argument expression for constructor.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK CONSTR INCLUDE
##
## Ends in an error in state: 135.
##
## expr -> CONSTR . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## CONSTR
##

Ill-formed arguments to constructor: did you forget a '(' before the arguments, or a '()' to indicate no arguments?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK EXCLAIM LITERAL INCLUDE
##
## Ends in an error in state: 428.
##
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## rule_elem -> LBRACK expr . RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## LBRACK expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 207, spurious reduction of production expr -> EXCLAIM expr
##

Ill-formed constraint expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK EXCLAIM INCLUDE
##
## Ends in an error in state: 134.
##
## expr -> EXCLAIM . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## EXCLAIM
##

Ill-formed expression: expected an argument for the '!' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID COLON ID COMMA INCLUDE
##
## Ends in an error in state: 213.
##
## separated_nonempty_list(COMMA,rec_exp_field) -> rec_exp_field COMMA . separated_nonempty_list(COMMA,rec_exp_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rec_exp_field COMMA
##

Ill-formed record field: perhaps you forgot a '}' to terminate the record?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID COLON LITERAL INCLUDE
##
## Ends in an error in state: 217.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## rec_exp_field -> ident COLON expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON expr
##

Ill-formed record field: perhaps you forgot a '}' to terminate the record?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID COLON INCLUDE
##
## Ends in an error in state: 216.
##
## rec_exp_field -> ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed value expression in record field: expected an expression after the ':'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID INCLUDE
##
## Ends in an error in state: 215.
##
## rec_exp_field -> ident . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed record field expression: perhaps you forgot a ':' after the field name?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE INCLUDE
##
## Ends in an error in state: 128.
##
## expr -> LBRACE . rec_exp_fields RBRACE [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record field.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACK LITERAL SEMICOLON INCLUDE
##
## Ends in an error in state: 220.
##
## listelems -> expr SEMICOLON . listelems [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON
##

Ill-formed expression for list element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACK LITERAL INCLUDE
##
## Ends in an error in state: 219.
##
## expr -> expr . DOT ident [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## listelems -> expr . SEMICOLON listelems [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## listelems -> expr . RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr
##

Ill-formed expression for list element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACK INCLUDE
##
## Ends in an error in state: 126.
##
## expr -> LBRACK . listelems [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed list expression: expected an expression for a list element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET CONSTR INCLUDE
##
## Ends in an error in state: 110.
##
## pattern -> CONSTR . option(pattern_args) [ RPAREN EQ COMMA COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## CONSTR
##

Ill-formed constructor pattern argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET LPAREN UNDERSCORE COMMA INCLUDE
##
## Ends in an error in state: 116.
##
## separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Ill-formed pattern argument in tuple pattern.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET LPAREN UNDERSCORE INCLUDE
##
## Ends in an error in state: 115.
##
## pattern -> pattern . COLONCOLON pattern [ RPAREN COMMA COLONCOLON ]
## separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
## separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed pattern argument in tuple pattern: perhaps you forgot a ',' or ')'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET LPAREN INCLUDE
##
## Ends in an error in state: 106.
##
## pattern_args -> LPAREN . loption(separated_nonempty_list(COMMA,pattern)) RPAREN [ RPAREN EQ COMMA COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed tuple pattern: expected a pattern argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ LITERAL IN INCLUDE
##
## Ends in an error in state: 224.
##
## expr -> LET pattern EQ expr IN . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN
##

Ill-formed expression body in let expression: expected an expression for the body.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ LITERAL INCLUDE
##
## Ends in an error in state: 223.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> LET pattern EQ expr . IN expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr
##

Ill-formed let expression: error in either the rhs of the binding, or there is a missing 'in' following the rhs of the binding.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ INCLUDE
##
## Ends in an error in state: 124.
##
## expr -> LET pattern EQ . expr IN expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ
##

Ill-formed rhs of the binding in the let expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE INCLUDE
##
## Ends in an error in state: 123.
##
## expr -> LET pattern . EQ expr IN expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## pattern -> pattern . COLONCOLON pattern [ EQ COLONCOLON ]
##
## The known suffix of the stack is as follows:
## LET pattern
##

A let binding pattern is followed by '='.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET INCLUDE
##
## Ends in an error in state: 104.
##
## expr -> LET . pattern EQ expr IN expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LET
##

Ill-formed let binding pattern.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL AT INCLUDE
##
## Ends in an error in state: 186.
##
## expr -> expr AT . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr AT
##

Ill-formed expression for the first argument of the '@' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL COLONCOLON INCLUDE
##
## Ends in an error in state: 184.
##
## expr -> expr COLONCOLON . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr COLONCOLON
##

Ill-formed expression for the first argument of the '::' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL CONSTR_MATCH INCLUDE
##
## Ends in an error in state: 200.
##
## expr -> expr CONSTR_MATCH . CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr CONSTR_MATCH
##

Ill-formed expression for the second argument of the '~~' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL DIV INCLUDE
##
## Ends in an error in state: 174.
##
## expr -> expr DIV . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

Ill-formed denominator argument for the '/' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL DOT INCLUDE
##
## Ends in an error in state: 167.
##
## expr -> expr DOT . ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr DOT . LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Ill-formed record field or attribute in expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL EQ INCLUDE
##
## Ends in an error in state: 198.
##
## expr -> expr EQ . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

Ill-formed expression for the second argument of the '=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL GT INCLUDE
##
## Ends in an error in state: 196.
##
## expr -> expr GT . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr GT
##

Ill-formed expression for the second argument of the '>' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL GTEQ INCLUDE
##
## Ends in an error in state: 194.
##
## expr -> expr GTEQ . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr GTEQ
##

Ill-formed expression for the second argument of the '>=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LAND INCLUDE
##
## Ends in an error in state: 202.
##
## expr -> expr LAND . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LAND
##

Ill-formed expression for the second argument of the '&&' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LBRACK LITERAL INCLUDE
##
## Ends in an error in state: 163.
##
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr LBRACK expr . RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
##
## The known suffix of the stack is as follows:
## expr LBRACK expr
##

Ill-formed index expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LBRACK INCLUDE
##
## Ends in an error in state: 162.
##
## expr -> expr LBRACK . expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LBRACK
##

Ill-formed index expression: expected an expression after the '['.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LOR INCLUDE
##
## Ends in an error in state: 192.
##
## expr -> expr LOR . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LOR
##

Ill-formed expression for the second argument of the '||' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LPAREN LITERAL INCLUDE
##
## Ends in an error in state: 151.
##
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

Ill-formed argument in application: did you forget a ',' to separate arguments?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LPAREN INCLUDE
##
## Ends in an error in state: 148.
##
## expr -> expr LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LPAREN
##

Ill-formed argument in application.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LT INCLUDE
##
## Ends in an error in state: 190.
##
## expr -> expr LT . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LT
##

Ill-formed expression for the second argument of the '<' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LTEQ INCLUDE
##
## Ends in an error in state: 188.
##
## expr -> expr LTEQ . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LTEQ
##

Ill-formed expression for the second argument of the '<=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL MINUS INCLUDE
##
## Ends in an error in state: 182.
##
## expr -> expr MINUS . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

Ill-formed expression for the second argument of the '-' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL NEQ INCLUDE
##
## Ends in an error in state: 180.
##
## expr -> expr NEQ . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

Ill-formed expression for the second argument of the '!=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL PLUS INCLUDE
##
## Ends in an error in state: 165.
##
## expr -> expr PLUS . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Ill-formed expression for the second argument of the '+' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL PLUS_S INCLUDE
##
## Ends in an error in state: 152.
##
## expr -> expr PLUS_S . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr PLUS_S
##

Ill-formed expression for the second argument of the '+_s' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL STAR INCLUDE
##
## Ends in an error in state: 146.
##
## expr -> expr STAR . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr STAR
##

Ill-formed expression for the second argument of the '*' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF BAR INCLUDE
##
## Ends in an error in state: 230.
##
## expr -> LPAREN CASE expr OF option(BAR) . loption(separated_nonempty_list(BAR,branch)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF option(BAR)
##

Ill-formed branch pattern in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE ARROW ID BAR INCLUDE
##
## Ends in an error in state: 238.
##
## separated_nonempty_list(BAR,branch) -> branch BAR . separated_nonempty_list(BAR,branch) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## branch BAR
##

Ill-formed branch pattern in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE ARROW LITERAL INCLUDE
##
## Ends in an error in state: 234.
##
## branch -> pattern ARROW expr . [ RPAREN BAR ]
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . MOD expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B BAR AT AND_B ]
##
## The known suffix of the stack is as follows:
## pattern ARROW expr
##

Ill-formed expression for branch body in case expression: perhaps you forgot to terminate it with a '|' or ')'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE ARROW INCLUDE
##
## Ends in an error in state: 233.
##
## branch -> pattern ARROW . expr [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Ill-formed expression for branch body in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE INCLUDE
##
## Ends in an error in state: 232.
##
## branch -> pattern . ARROW expr [ RPAREN BAR ]
## pattern -> pattern . COLONCOLON pattern [ COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed branch in case expression: perhaps you forgot a '->' after the branch pattern?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF INCLUDE
##
## Ends in an error in state: 228.
##
## expr -> LPAREN CASE expr OF . option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF
##

Ill-formed pattern in branch of case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL INCLUDE
##
## Ends in an error in state: 227.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> LPAREN CASE expr . OF option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr
##

Ill-formed scrutinee expression in case expression: perhaps you forgot an 'of' after the scrutinee?


toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE INCLUDE
##
## Ends in an error in state: 226.
##
## expr -> LPAREN CASE . expr OF option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE
##

Ill-formed scrutinee expression in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL COLON TVAR INCLUDE
##
## Ends in an error in state: 244.
##
## expr -> LPAREN expr COLON type_expr . RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COLON type_expr
##

Ill-formed type constraint in expression: perhaps you forgot to terminate the constraint with a ')'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL COLON INCLUDE
##
## Ends in an error in state: 243.
##
## expr -> LPAREN expr COLON . type_expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COLON
##

Ill-formed type constraint expression: expected a type expression after the ':'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL COMMA INCLUDE
##
## Ends in an error in state: 204.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL INCLUDE
##
## Ends in an error in state: 242.
##
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON BAR_B AT AND_B ]
## expr -> LPAREN expr . COLON type_expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

Ill-formed expression: perhaps you forgot a ',' separator or a ')' terminator?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN INCLUDE
##
## Ends in an error in state: 102.
##
## expr -> LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> LPAREN . CASE expr OF option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> LPAREN . expr COLON type_expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed expression: expected an expression after the '('.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK MINUS INCLUDE
##
## Ends in an error in state: 101.
##
## expr -> MINUS . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Ill-formed expression for the argument of the unary '-' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK UID DOT INCLUDE
##
## Ends in an error in state: 98.
##
## expr -> UID DOT . ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## UID DOT
##

Ill-formed field identifer in record field expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK UID INCLUDE
##
## Ends in an error in state: 97.
##
## expr -> UID . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed module expression: expected a '.' after the module name.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK INCLUDE
##
## Ends in an error in state: 427.
##
## rule_elem -> LBRACK . expr RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed constraint expression.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON ID COLONEQ ID COMMA INCLUDE
##
## Ends in an error in state: 523.
##
## separated_nonempty_list(COMMA,temp_decl) -> temp_decl COMMA . separated_nonempty_list(COMMA,temp_decl) [ RPARBAR ]
##
## The known suffix of the stack is as follows:
## temp_decl COMMA
##

Ill-formed temporary declaration.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON TVAR COLONEQ LITERAL INCLUDE
##
## Ends in an error in state: 529.
##
## expr -> expr . DOT ident [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPARBAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## temp_decl -> ident COLON type_expr COLONEQ expr . [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ expr
##

Ill-formed initializer expression in temporary declaration.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON TVAR COLONEQ INCLUDE
##
## Ends in an error in state: 528.
##
## temp_decl -> ident COLON type_expr COLONEQ . expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ
##

Ill-formed initializer expression in temporary declaration: expected an expression after the ':='.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON TVAR INCLUDE
##
## Ends in an error in state: 527.
##
## temp_decl -> ident COLON type_expr . COLONEQ expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr
##

Ill-formed temporary declaration: expected an initializer expression.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON INCLUDE
##
## Ends in an error in state: 526.
##
## temp_decl -> ident COLON . type_expr COLONEQ expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed temporary declaration: expected a type specifier.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID INCLUDE
##
## Ends in an error in state: 525.
##
## temp_decl -> ident . COLON type_expr COLONEQ expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed temporary declaration: perhaps you forgot a ':' after the temporary identifier?

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR RPARBAR INCLUDE
##
## Ends in an error in state: 520.
##
## rule -> LPARBAR temp_decls RPARBAR . list(rule_elem) [ SEMISEMI SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LPARBAR temp_decls RPARBAR
##

Ill-formed rule: expected a rule element, or a ';' or ';;' terminator.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR INCLUDE
##
## Ends in an error in state: 518.
##
## rule -> LPARBAR . temp_decls RPARBAR list(rule_elem) [ SEMISEMI SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LPARBAR
##

Ill-formed temporaries declaration.

toplevel: FORMAT LBRACE UID COLONEQ LPAREN UID RBRACE
##
## Ends in an error in state: 516.
##
## rule_elem -> LPAREN list(rule_elem) . RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN list(rule_elem)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 349, spurious reduction of production option(nt_args) ->
## In state 371, spurious reduction of production rule_elem -> UID option(nt_args)
## In state 514, spurious reduction of production list(rule_elem) ->
## In state 515, spurious reduction of production list(rule_elem) -> rule_elem list(rule_elem)
##

Ill-formed rule element list: perhaps you forgot a ')'?

toplevel: FORMAT LBRACE UID COLONEQ LPAREN INCLUDE
##
## Ends in an error in state: 426.
##
## rule_elem -> LPAREN . list(rule_elem) RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ SEMICOLON INCLUDE
##
## Ends in an error in state: 534.
##
## separated_nonempty_list(SEMICOLON,rule) -> rule SEMICOLON . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## rule SEMICOLON
##

A rule begins with an ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ SEMISEMI INCLUDE
##
## Ends in an error in state: 562.
##
## separated_nonempty_list(SEMISEMI,format_decl) -> format_decl SEMISEMI . separated_nonempty_list(SEMISEMI,format_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## format_decl SEMISEMI
##

Ill-formed non-terminal definition: expected a non-terminal identifier (optionally prefixed with an attribute decoration).

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LBRACK INCLUDE
##
## Ends in an error in state: 377.
##
## regexp -> LBRACK . literal_set RBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed literal set: expected a literal.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LPAREN INCLUDE
##
## Ends in an error in state: 376.
##
## regexp -> LPAREN . list(regexp) RPAREN [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed regular expression: expected a regular expression after the '('.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID BAR INCLUDE
##
## Ends in an error in state: 402.
##
## regexp -> regexp BAR . regexp [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp BAR
##

Ill-formed regular expression: expected a regular expression after the '|'.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID CARET LITERAL INCLUDE
##
## Ends in an error in state: 401.
##
## expr -> expr . DOT ident [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LAND expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LOR expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . PLUS_S expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . BAR_B expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . AND_B expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . PLUS expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . AT expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . MINUS expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . STAR expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . MOD expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . DIV expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LT expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . GT expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . LTEQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . GTEQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . EQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . NEQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## expr -> expr . COLONCOLON expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT AND_B ]
## regexp -> regexp CARET expr . [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp CARET expr
##

Ill-formed bound expression in regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID CARET INCLUDE
##
## Ends in an error in state: 400.
##
## regexp -> regexp CARET . expr [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp CARET
##

Ill-formed bound expression in regular expression: expected an expression after the '^'.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN INCLUDE
##
## Ends in an error in state: 372.
##
## rule_elem -> SYN_BEGIN . nonempty_list(regexp) SYN_END [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SYN_BEGIN
##

Ill-formed regular expression: expected a regular expression.

toplevel: FORMAT LBRACE UID COLONEQ UID BAR EPSILON INCLUDE
##
## Ends in an error in state: 506.
##
## rule_elem -> rule_elem . BAR rule_elem [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem BAR rule_elem . [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . STAR [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . CARET expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . PLUS [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . QUESTION [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## rule_elem BAR rule_elem
##

Ill-formed rule element in rule.

toplevel: FORMAT LBRACE UID COLONEQ UID BAR INCLUDE
##
## Ends in an error in state: 505.
##
## rule_elem -> rule_elem BAR . rule_elem [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## rule_elem BAR
##

Ill-formed rule element: expected a rule element after the '|'.

toplevel: FORMAT LBRACE UID COLONEQ UID CARET LITERAL INCLUDE
##
## Ends in an error in state: 504.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS PAD NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## rule_elem -> rule_elem CARET expr . [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## rule_elem CARET expr
##

Ill-formed bound expression for rule element.

toplevel: FORMAT LBRACE UID COLONEQ UID CARET INCLUDE
##
## Ends in an error in state: 503.
##
## rule_elem -> rule_elem CARET . expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## rule_elem CARET
##

Ill-formed bound expression: expected an expression after the '^'.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID EQ ID COMMA INCLUDE
##
## Ends in an error in state: 353.
##
## separated_nonempty_list(COMMA,nt_attr_val) -> nt_attr_val COMMA . separated_nonempty_list(COMMA,nt_attr_val) [ GT ]
##
## The known suffix of the stack is as follows:
## nt_attr_val COMMA
##

Ill-formed inherited attribute specifier: expected an attribute initializer after the ','.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID EQ LITERAL INCLUDE
##
## Ends in an error in state: 361.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## nt_attr_val -> ident EQ expr . [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQ expr
##

Ill-formed inherited attribute specifier: ill-formed initializer expression.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID EQ INCLUDE
##
## Ends in an error in state: 360.
##
## nt_attr_val -> ident EQ . expr [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed inherited attribute specifier: expected an expression after the '='.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID INCLUDE
##
## Ends in an error in state: 355.
##
## nt_attr_val -> ident . EQ expr [ GT COMMA ]
## nt_attr_val -> ident . LARROW LPAREN expr RPAREN [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed inherited attribute specifier: perhaps you forgot an '=' after the attribute identifier?

toplevel: FORMAT LBRACE UID COLONEQ UID LT INCLUDE
##
## Ends in an error in state: 350.
##
## nt_args -> LT . loption(separated_nonempty_list(COMMA,nt_attr_val)) GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> UID LT . int_exp GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## UID LT
##

Ill-formed inherited attribute specifier: expected an attribute identifier after the '<'.

toplevel: FORMAT LBRACE UID COLONEQ UID RBRACK
##
## Ends in an error in state: 514.
##
## list(rule_elem) -> rule_elem . list(rule_elem) [ SEMISEMI SEMICOLON RPAREN RBRACE ]
## rule_elem -> rule_elem . BAR rule_elem [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . STAR [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . CARET expr [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . PLUS [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> rule_elem . QUESTION [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 349, spurious reduction of production option(nt_args) ->
## In state 371, spurious reduction of production rule_elem -> UID option(nt_args)
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ UID RPAREN
##
## Ends in an error in state: 533.
##
## separated_nonempty_list(SEMICOLON,rule) -> rule . [ SEMISEMI RBRACE ]
## separated_nonempty_list(SEMICOLON,rule) -> rule . SEMICOLON separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## rule
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 349, spurious reduction of production option(nt_args) ->
## In state 371, spurious reduction of production rule_elem -> UID option(nt_args)
## In state 514, spurious reduction of production list(rule_elem) ->
## In state 515, spurious reduction of production list(rule_elem) -> rule_elem list(rule_elem)
## In state 536, spurious reduction of production rule -> list(rule_elem)
##

Ill-formed rule: perhaps you forgot a ';', ';;' or '}' terminator?

toplevel: FORMAT LBRACE UID COLONEQ UID INCLUDE
##
## Ends in an error in state: 349.
##
## rule_elem -> UID . option(nt_args) [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> UID . DOT UID option(nt_args) [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
## rule_elem -> UID . LT int_exp GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ INCLUDE
##
## Ends in an error in state: 555.
##
## nt_defn -> UID option(ident) COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) COLONEQ
##

Ill-formed rule: expected a rule after the ':='.

toplevel: FORMAT LBRACE UID ID COLONCOLON
##
## Ends in an error in state: 336.
##
## nt_defn -> UID option(ident) . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) . LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) . LPAREN param_decls RPAREN COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) . LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident)
##

Ill-formed non-terminal definition: expected attribute declarations or a ':=' after the non-terminal identifier.

toplevel: FORMAT LBRACE UID LBRACE ID COLON ID COMMA INCLUDE
##
## Ends in an error in state: 539.
##
## separated_nonempty_list(COMMA,nt_attr_decl) -> nt_attr_decl COMMA . separated_nonempty_list(COMMA,nt_attr_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nt_attr_decl COMMA
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID LBRACE ID COLON ID COMMA ID INCLUDE
##
## Ends in an error in state: 541.
##
## nt_attr_decl -> ident . COLON type_expr [ RBRACE COMMA ]
## nt_attr_decl -> ident . COLON type_expr COLONEQ expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a ':'?

toplevel: FORMAT LBRACE UID LBRACE ID COLON INCLUDE
##
## Ends in an error in state: 542.
##
## nt_attr_decl -> ident COLON . type_expr [ RBRACE COMMA ]
## nt_attr_decl -> ident COLON . type_expr COLONEQ expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed type specifier for attribute.

toplevel: FORMAT LBRACE UID LBRACE ID COLON ID RPAREN
##
## Ends in an error in state: 543.
##
## nt_attr_decl -> ident COLON type_expr . [ RBRACE COMMA ]
## nt_attr_decl -> ident COLON type_expr . COLONEQ expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production type_expr -> ident
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID LBRACE ID COLON TVAR COLONEQ INCLUDE
##
## Ends in an error in state: 544.
##
## nt_attr_decl -> ident COLON type_expr COLONEQ . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ
##

Ill-formed initializer for synthesized attribute.

toplevel: FORMAT LBRACE UID LBRACE ID COLON TVAR COLONEQ LITERAL INCLUDE
##
## Ends in an error in state: 545.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## nt_attr_decl -> ident COLON type_expr COLONEQ expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ expr
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID LBRACE ID INCLUDE
##
## Ends in an error in state: 547.
##
## nt_attr_decl -> ident . COLON type_expr [ RBRACE COMMA ]
## nt_attr_decl -> ident . COLON type_expr COLONEQ expr [ RBRACE COMMA ]
## nt_param_decls -> ident . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed synthesized attribute declaration: perhaps you forgot a ':' or '}'?

toplevel: FORMAT LBRACE UID LBRACE RBRACE COLONEQ INCLUDE
##
## Ends in an error in state: 553.
##
## nt_defn -> UID option(ident) LBRACE nt_param_decls RBRACE COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LBRACE nt_param_decls RBRACE COLONEQ
##

Ill-formed rule: expected a rule after the ':='.

toplevel: FORMAT LBRACE UID LBRACE RBRACE INCLUDE
##
## Ends in an error in state: 552.
##
## nt_defn -> UID option(ident) LBRACE nt_param_decls RBRACE . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LBRACE nt_param_decls RBRACE
##

Ill-formed non-terminal definition: perhaps you forgot a ':=' after the attribute declarations?

toplevel: FORMAT LBRACE UID LBRACE INCLUDE
##
## Ends in an error in state: 550.
##
## nt_defn -> UID option(ident) LBRACE . nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LBRACE
##

Ill-formed non-terminal definition: expected synthesized attribute declarations after the '{'.

toplevel: FORMAT LBRACE UID LPAREN ID COLON ID RBRACE
##
## Ends in an error in state: 250.
##
## separated_nonempty_list(COMMA,param_decl) -> param_decl . [ RPAREN ]
## separated_nonempty_list(COMMA,param_decl) -> param_decl . COMMA separated_nonempty_list(COMMA,param_decl) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production type_expr -> ident
## In state 255, spurious reduction of production param_decl -> ident COLON type_expr
##

Ill-formed non-terminal definition: perhaps you forgot a ')' after the inherited attribute declarations?

toplevel: FORMAT LBRACE UID LPAREN RPAREN COLONEQ INCLUDE
##
## Ends in an error in state: 548.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN COLONEQ
##

Ill-formed rule: expected a rule after the ':='.

toplevel: FORMAT LBRACE UID LPAREN RPAREN LBRACE RBRACE COLONEQ INCLUDE
##
## Ends in an error in state: 344.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ
##

Ill-formed rule: expected a rule to follow the ':='.

toplevel: FORMAT LBRACE UID LPAREN RPAREN LBRACE RBRACE INCLUDE
##
## Ends in an error in state: 343.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE
##

Ill-formed non-terminal definition: perhaps you forgot a ':=' after the attribute declarations?

toplevel: FORMAT LBRACE UID LPAREN RPAREN LBRACE INCLUDE
##
## Ends in an error in state: 340.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN LBRACE . nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN LBRACE
##

Ill-formed declaration of synthesized attributes.

toplevel: FORMAT LBRACE UID LPAREN RPAREN INCLUDE
##
## Ends in an error in state: 339.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN . LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN
##

Ill-formed non-terminal definition: expected either a declaration of synthesized attributes or a ':='.

toplevel: FORMAT LBRACE UID LPAREN INCLUDE
##
## Ends in an error in state: 337.
##
## nt_defn -> UID option(ident) LPAREN . param_decls RPAREN COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) LPAREN . param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN
##

Ill-formed inherited attribute declaration: expected an attribute identifier after the '('.

toplevel: FORMAT LBRACE UID INCLUDE
##
## Ends in an error in state: 335.
##
## nt_defn -> UID . option(ident) COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID . option(ident) LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID . option(ident) LPAREN param_decls RPAREN COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID . option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed non-terminal definition.

toplevel: FORMAT LBRACE INCLUDE
##
## Ends in an error in state: 309.
##
## pre_decl -> FORMAT LBRACE . loption(separated_nonempty_list(SEMISEMI,format_decl)) RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## FORMAT LBRACE
##

Ill-formed non-terminal definition: expected a non-terminal identifier.

toplevel: FORMAT INCLUDE
##
## Ends in an error in state: 308.
##
## pre_decl -> FORMAT . LBRACE loption(separated_nonempty_list(SEMISEMI,format_decl)) RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## FORMAT
##

Ill-formed format grammar section: did you forget a '{'?

toplevel: FUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL INCLUDE
##
## Ends in an error in state: 305.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## fun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body: perhaps you forgot a '}'?

toplevel: FUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE INCLUDE
##
## Ends in an error in state: 304.
##
## fun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed function body: expected an expression after the '{'.

toplevel: FUN ID LPAREN RPAREN ARROW TVAR EQ INCLUDE
##
## Ends in an error in state: 303.
##
## fun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{' after the '='?

toplevel: FUN ID LPAREN RPAREN ARROW TVAR INCLUDE
##
## Ends in an error in state: 302.
##
## fun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed function definition: did you forget a '=' after the function signature?

toplevel: FUN ID LPAREN RPAREN ARROW INCLUDE
##
## Ends in an error in state: 301.
##
## fun_decl -> ident LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW
##

Ill-formed function definition: expected a type expression after the '->'.

toplevel: FUN ID LPAREN RPAREN INCLUDE
##
## Ends in an error in state: 300.
##
## fun_decl -> ident LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN
##

Ill-formed function definition: expected an '->' after the function parameter declarations.

toplevel: FUN ID LPAREN INCLUDE
##
## Ends in an error in state: 298.
##
## fun_decl -> ident LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LPAREN
##

Ill-formed function definition: expected a parameter identifer after the '('.

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL INCLUDE
##
## Ends in an error in state: 296.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body.

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE INCLUDE
##
## Ends in an error in state: 295.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed expression in function body.

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR EQ INCLUDE
##
## Ends in an error in state: 294.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{'?

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR INCLUDE
##
## Ends in an error in state: 293.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed return type in function signature: perhaps you forgot an '='?

toplevel: FUN ID LT GT LPAREN RPAREN ARROW INCLUDE
##
## Ends in an error in state: 292.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW
##

Ill-formed return type in function signature.

toplevel: FUN ID LT GT LPAREN RPAREN INCLUDE
##
## Ends in an error in state: 291.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN
##

Ill-formed function signature: perhaps you forgot an '->'?

toplevel: FUN ID LT GT LPAREN INCLUDE
##
## Ends in an error in state: 289.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN
##

Ill-formed parameter declaration in function signature.

toplevel: FUN ID LT GT INCLUDE
##
## Ends in an error in state: 288.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT
##

Ill-formed parameter declaration in function signature: perhaps you forgot a '('?

toplevel: FUN ID LT TVAR RPAREN
##
## Ends in an error in state: 287.
##
## fun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) . GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production separated_nonempty_list(COMMA,TVAR) -> TVAR
## In state 13, spurious reduction of production loption(separated_nonempty_list(COMMA,TVAR)) -> separated_nonempty_list(COMMA,TVAR)
##

Ill-formed type parameter declarations in function signature: perhaps you forgot a '>'?

toplevel: FUN ID LT INCLUDE
##
## Ends in an error in state: 286.
##
## fun_decl -> ident LT . loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident LT
##

Ill-formed type parameter in function signature.

toplevel: FUN ID INCLUDE
##
## Ends in an error in state: 285.
##
## fun_decl -> ident . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## fun_decl -> ident . LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed function definition: expected a declaration of type parameters or argument parameters.

toplevel: FUN INCLUDE
##
## Ends in an error in state: 284.
##
## pre_decl -> FUN . fun_decl [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## FUN
##

Ill-formed function definition: expected a function identifier.

toplevel: RECFUN ID LPAREN ID COLON ID COMMA INCLUDE
##
## Ends in an error in state: 251.
##
## separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA . separated_nonempty_list(COMMA,param_decl) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param_decl COMMA
##

Ill-formed function parameter declaration: expected a parameter identifier.

toplevel: RECFUN ID LPAREN ID COLON INCLUDE
##
## Ends in an error in state: 254.
##
## param_decl -> ident COLON . type_expr [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Expected a type expression after the ':'.

toplevel: RECFUN ID LPAREN ID INCLUDE
##
## Ends in an error in state: 253.
##
## param_decl -> ident . COLON type_expr [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Expected a ':' after the identifier.

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL INCLUDE
##
## Ends in an error in state: 264.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## recfun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body.

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE INCLUDE
##
## Ends in an error in state: 263.
##
## recfun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed expression for function body: expected an expression after the '{'.

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR EQ INCLUDE
##
## Ends in an error in state: 262.
##
## recfun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{' after the '='?

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR INCLUDE
##
## Ends in an error in state: 261.
##
## recfun_decl -> ident LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed function definition: did you forget a '=' after the function signature?

toplevel: RECFUN ID LPAREN RPAREN ARROW INCLUDE
##
## Ends in an error in state: 260.
##
## recfun_decl -> ident LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN ARROW
##

Ill-formed function definition: expected a type expression after the '->'.

toplevel: RECFUN ID LPAREN RPAREN INCLUDE
##
## Ends in an error in state: 259.
##
## recfun_decl -> ident LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN param_decls RPAREN
##

Ill-formed function definition: expected an '->' after the function parameter declarations.

toplevel: RECFUN ID LPAREN INCLUDE
##
## Ends in an error in state: 257.
##
## recfun_decl -> ident LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN
##

Ill-formed function definition: expected a parameter identifer after the '('.

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL INCLUDE
##
## Ends in an error in state: 248.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body.

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE INCLUDE
##
## Ends in an error in state: 96.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed expression in function body.

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR EQ INCLUDE
##
## Ends in an error in state: 95.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{'?

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR INCLUDE
##
## Ends in an error in state: 94.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed return type in function signature: perhaps you forgot an '='?

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW INCLUDE
##
## Ends in an error in state: 93.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW
##

Ill-formed return type in function signature.

toplevel: RECFUN ID LT GT LPAREN RPAREN INCLUDE
##
## Ends in an error in state: 92.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN
##

Ill-formed function signature: perhaps you forgot an '->'?

toplevel: RECFUN ID LT GT LPAREN INCLUDE
##
## Ends in an error in state: 89.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN
##

Ill-formed parameter declaration in function signature.

toplevel: RECFUN ID LT GT INCLUDE
##
## Ends in an error in state: 88.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT
##

Ill-formed parameter declaration in function signature: perhaps you forgot a '('?

toplevel: RECFUN ID LT TVAR RPAREN
##
## Ends in an error in state: 87.
##
## recfun_decl -> ident LT loption(separated_nonempty_list(COMMA,TVAR)) . GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT loption(separated_nonempty_list(COMMA,TVAR))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production separated_nonempty_list(COMMA,TVAR) -> TVAR
## In state 13, spurious reduction of production loption(separated_nonempty_list(COMMA,TVAR)) -> separated_nonempty_list(COMMA,TVAR)
##

Ill-formed type parameter declarations in function signature: perhaps you forgot a '>'?

toplevel: RECFUN ID LT INCLUDE
##
## Ends in an error in state: 86.
##
## recfun_decl -> ident LT . loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LT
##

Ill-formed type parameter in function signature.

toplevel: RECFUN ID INCLUDE
##
## Ends in an error in state: 85.
##
## recfun_decl -> ident . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## recfun_decl -> ident . LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed function definition: expected a declaration of type parameters or argument parameters.


toplevel: TYPE ID EQ BAR UID BAR INCLUDE
##
## Ends in an error in state: 67.
##
## separated_nonempty_list(BAR,variant) -> variant BAR . separated_nonempty_list(BAR,variant) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## variant BAR
##

Ill-formed data constructor in type definition.

toplevel: TYPE ID EQ BAR UID OF TVAR STAR INCLUDE
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(STAR,type_expr) -> type_expr STAR . separated_nonempty_list(STAR,type_expr) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## type_expr STAR
##

Ill-formed type expression: expected a type expression after the '*'.

toplevel: TYPE ID EQ BAR UID OF TVAR UNDERSCORE
##
## Ends in an error in state: 61.
##
## separated_nonempty_list(STAR,type_expr) -> type_expr . [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD BAR AND ]
## separated_nonempty_list(STAR,type_expr) -> type_expr . STAR separated_nonempty_list(STAR,type_expr) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## type_expr
##

Ill-formed type expression.

toplevel: TYPE ID EQ BAR UID OF UNDERSCORE
##
## Ends in an error in state: 60.
##
## variant -> UID OF . loption(separated_nonempty_list(STAR,type_expr)) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## UID OF
##

Ill-formed type expression: expected a type expression after 'of'.

toplevel: TYPE ID EQ BAR UID UNDERSCORE
##
## Ends in an error in state: 59.
##
## variant -> UID . [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD BAR AND ]
## variant -> UID . OF loption(separated_nonempty_list(STAR,type_expr)) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed type expression.

toplevel: TYPE ID EQ BAR INCLUDE
##
## Ends in an error in state: 58.
##
## variants -> BAR . separated_nonempty_list(BAR,variant) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## BAR
##

Ill-formed type declaration: expected a data constructor after the '|'.

toplevel: TYPE ID EQ ID AND ID EQ ID AND INCLUDE
##
## Ends in an error in state: 6.
##
## separated_nonempty_list(AND,type_decl) -> type_decl AND . separated_nonempty_list(AND,type_decl) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## type_decl AND
##

Ill-formed type declaration: expected a type identifier after 'and'.

toplevel: TYPE ID EQ ID AND ID EQ TVAR UNDERSCORE
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(AND,type_decl) -> type_decl . [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## separated_nonempty_list(AND,type_decl) -> type_decl . AND separated_nonempty_list(AND,type_decl) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## type_decl
##

Ill-formed declaration.

toplevel: TYPE ID EQ ID AND UNDERSCORE
##
## Ends in an error in state: 4.
##
## type_decls -> TYPE type_decl AND . loption(separated_nonempty_list(AND,type_decl)) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## TYPE type_decl AND
##

Ill-formed type declaration: expected a type identifier after 'and'.

toplevel: TYPE ID EQ ID UNDERSCORE
##
## Ends in an error in state: 23.
##
## def -> ident . [ LT ]
## type_expr -> ident . [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed type expression.

toplevel: TYPE ID EQ LBRACE ID COLON ID COMMA INCLUDE
##
## Ends in an error in state: 52.
##
## separated_nonempty_list(COMMA,rec_typ_field) -> rec_typ_field COMMA . separated_nonempty_list(COMMA,rec_typ_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rec_typ_field COMMA
##

Ill-formed field declaration in record type: expected a field identifier.

toplevel: TYPE ID EQ LBRACE ID COLON ID INCLUDE
##
## Ends in an error in state: 51.
##
## separated_nonempty_list(COMMA,rec_typ_field) -> rec_typ_field . [ RBRACE ]
## separated_nonempty_list(COMMA,rec_typ_field) -> rec_typ_field . COMMA separated_nonempty_list(COMMA,rec_typ_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rec_typ_field
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production type_expr -> ident
## In state 56, spurious reduction of production rec_typ_field -> ident COLON type_expr
##

Ill-formed record type declaration: did you forget a ',' separator or a '}' terminator?

toplevel: TYPE ID EQ LBRACE ID COLON INCLUDE
##
## Ends in an error in state: 55.
##
## rec_typ_field -> ident COLON . type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed field declaration in record type: expected a type expression after the ':'.

toplevel: TYPE ID EQ LBRACE ID INCLUDE
##
## Ends in an error in state: 54.
##
## rec_typ_field -> ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed field declaration in record type: expected a ':' after the field identifier.

toplevel: TYPE ID EQ LBRACE INCLUDE
##
## Ends in an error in state: 73.
##
## type_decl -> ident EQ LBRACE . rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident EQ LBRACE
##

Ill-formed record type declaration: expected a field identifier after the '{'.

toplevel: TYPE ID EQ LBRACK TVAR INCLUDE
##
## Ends in an error in state: 21.
##
## type_expr -> LBRACK type_expr . RBRACK [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## LBRACK type_expr
##

Ill-formed list type: did you forget a ']'?

toplevel: TYPE ID EQ LBRACK INCLUDE
##
## Ends in an error in state: 20.
##
## type_expr -> LBRACK . type_expr RBRACK [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed list type: expected a type expression after the '['.

toplevel: TYPE ID EQ LPAREN TVAR COMMA INCLUDE
##
## Ends in an error in state: 29.
##
## separated_nonempty_list(COMMA,type_expr) -> type_expr COMMA . separated_nonempty_list(COMMA,type_expr) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

Ill-formed type expression: expected a type expression after the ','.

toplevel: TYPE ID EQ LPAREN TVAR GT
##
## Ends in an error in state: 32.
##
## type_expr -> LPAREN loption(separated_nonempty_list(COMMA,type_expr)) . RPAREN [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,type_expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production separated_nonempty_list(COMMA,type_expr) -> type_expr
## In state 31, spurious reduction of production loption(separated_nonempty_list(COMMA,type_expr)) -> separated_nonempty_list(COMMA,type_expr)
##

Ill-formed tuple type expression: did you forget a ')'?

toplevel: TYPE ID EQ LPAREN TVAR INCLUDE
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(COMMA,type_expr) -> type_expr . [ RPAREN GT ]
## separated_nonempty_list(COMMA,type_expr) -> type_expr . COMMA separated_nonempty_list(COMMA,type_expr) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## type_expr
##

Ill-formed type expression: expected a ',' or a terminating ')' or '>'.

toplevel: TYPE ID EQ LPAREN INCLUDE
##
## Ends in an error in state: 19.
##
## type_expr -> LPAREN . loption(separated_nonempty_list(COMMA,type_expr)) RPAREN [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed type expression: expected a type expression after the '('.

toplevel: TYPE ID EQ TVAR UNDERSCORE
##
## Ends in an error in state: 3.
##
## type_decls -> TYPE type_decl . [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## type_decls -> TYPE type_decl . AND loption(separated_nonempty_list(AND,type_decl)) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## TYPE type_decl
##

Ill-formed declaration.

toplevel: TYPE ID EQ UID LT TVAR RPAREN
##
## Ends in an error in state: 43.
##
## type_expr -> def LT loption(separated_nonempty_list(COMMA,type_expr)) . GT [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## def LT loption(separated_nonempty_list(COMMA,type_expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production separated_nonempty_list(COMMA,type_expr) -> type_expr
## In state 31, spurious reduction of production loption(separated_nonempty_list(COMMA,type_expr)) -> separated_nonempty_list(COMMA,type_expr)
##

Ill-formed type expression: did you forget a '>'?

toplevel: TYPE ID EQ UID LT INCLUDE
##
## Ends in an error in state: 25.
##
## type_expr -> def LT . int_exp GT [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
## type_expr -> def LT . loption(separated_nonempty_list(COMMA,type_expr)) GT [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## def LT
##

Ill-formed type parameter: expected a type parameter after the '<'.

toplevel: TYPE ID EQ UID INCLUDE
##
## Ends in an error in state: 24.
##
## type_expr -> def . LT int_exp GT [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
## type_expr -> def . LT loption(separated_nonempty_list(COMMA,type_expr)) GT [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## def
##

Ill-formed type expression: did you forget a '<'?

toplevel: TYPE ID EQ INCLUDE
##
## Ends in an error in state: 72.
##
## type_decl -> ident EQ . type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident EQ . variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident EQ . LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed type declaration: expected a type expression after the '='.

toplevel: TYPE ID LPAREN RPAREN EQ LBRACE INCLUDE
##
## Ends in an error in state: 47.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE . rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE
##

Ill-formed record field in type declaration: expected a field identifier after the '{'.

toplevel: TYPE ID LPAREN RPAREN EQ INCLUDE
##
## Ends in an error in state: 16.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ . type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ . variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ . LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ
##

Ill-formed type declaration: expected a variant type, record type or type expression after the '='.

toplevel: TYPE ID LPAREN RPAREN INCLUDE
##
## Ends in an error in state: 15.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN . EQ type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN . EQ variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN . EQ LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN
##

Ill-formed type declaration: did you forget a '=' after the ')'?

toplevel: TYPE ID LPAREN TVAR COMMA INCLUDE
##
## Ends in an error in state: 11.
##
## separated_nonempty_list(COMMA,TVAR) -> TVAR COMMA . separated_nonempty_list(COMMA,TVAR) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## TVAR COMMA
##

Ill-formed type variable list: expected a type variable after the ','.

toplevel: TYPE ID LPAREN TVAR GT
##
## Ends in an error in state: 14.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) . RPAREN EQ type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) . RPAREN EQ variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) . RPAREN EQ LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production separated_nonempty_list(COMMA,TVAR) -> TVAR
## In state 13, spurious reduction of production loption(separated_nonempty_list(COMMA,TVAR)) -> separated_nonempty_list(COMMA,TVAR)
##

Ill-formed type variable list in type declaration: did you forget a ')'?

toplevel: TYPE ID LPAREN TVAR INCLUDE
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,TVAR) -> TVAR . [ RPAREN GT ]
## separated_nonempty_list(COMMA,TVAR) -> TVAR . COMMA separated_nonempty_list(COMMA,TVAR) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## TVAR
##

Ill-formed type variable list: did you forget a ',', ')' or '>'?

toplevel: TYPE ID LPAREN INCLUDE
##
## Ends in an error in state: 9.
##
## type_decl -> ident LPAREN . loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN . loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident LPAREN . loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN
##

Ill-formed type variable in type declaration: expected a type variable after the '('.

toplevel: TYPE ID INCLUDE
##
## Ends in an error in state: 8.
##
## type_decl -> ident . EQ type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident . LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ type_expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident . EQ variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident . LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ variants [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident . EQ LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
## type_decl -> ident . LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE rec_typ_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD AND ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed type declaration: expected a type variable list or '='.

toplevel: TYPE INCLUDE
##
## Ends in an error in state: 1.
##
## type_decls -> TYPE . type_decl [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## type_decls -> TYPE . type_decl AND loption(separated_nonempty_list(AND,type_decl)) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Ill-formed type declaration: expected a type identifier.

toplevel: UNDERSCORE
##
## Ends in an error in state: 0.
##
## toplevel' -> . toplevel [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed declaration.

toplevel: INCLUDE ID UNDERSCORE
##
## Ends in an error in state: 590.
##
## list(pre_decl) -> pre_decl . list(pre_decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## pre_decl
##

Ill-formed declaration.

toplevel: INCLUDE LBRACE ID COMMA INCLUDE
##
## Ends in an error in state: 272.
##
## separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ident COMMA
##

Ill-formed include declaration: expected a file identifer (i.e. the basename of a Parsley source file) after the ','.

toplevel: INCLUDE LBRACE ID INCLUDE
##
## Ends in an error in state: 271.
##
## separated_nonempty_list(COMMA,ident) -> ident . [ RBRACE ]
## separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed include declaration: did you forget a ',' separator or a '}' terminator?

toplevel: INCLUDE LBRACE INCLUDE
##
## Ends in an error in state: 267.
##
## pre_decl -> INCLUDE LBRACE . loption(separated_nonempty_list(COMMA,ident)) RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## INCLUDE LBRACE
##

Ill-formed include declaration: expected a file identifier (i.e. the basename of a Parsley source file).

toplevel: INCLUDE INCLUDE
##
## Ends in an error in state: 266.
##
## pre_decl -> INCLUDE . ident [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## pre_decl -> INCLUDE . LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## INCLUDE
##

Ill-formed include declaration: expected a file identifier (i.e. the basename of a Parsley source file) or an opening '{'.

toplevel: TYPE ID EQ UID LT INT_LITERAL MINUS INT_LITERAL INCLUDE
##
## Ends in an error in state: 42.
##
## int_exp -> int_exp . PLUS int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
## int_exp -> int_exp . MINUS int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
## int_exp -> int_exp MINUS int_exp . [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
## int_exp -> int_exp . STAR int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## int_exp MINUS int_exp
##

Ill-formed type: expected a closing '>' to terminate the type.

toplevel: TYPE ID EQ UID LT INT_LITERAL MINUS INCLUDE
##
## Ends in an error in state: 41.
##
## int_exp -> int_exp MINUS . int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## int_exp MINUS
##

Ill-formed type: expected an integer argument.

toplevel: TYPE ID EQ UID LT INT_LITERAL PLUS INT_LITERAL INCLUDE
##
## Ends in an error in state: 40.
##
## int_exp -> int_exp . PLUS int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
## int_exp -> int_exp PLUS int_exp . [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
## int_exp -> int_exp . MINUS int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
## int_exp -> int_exp . STAR int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## int_exp PLUS int_exp
##

Ill-formed type: expected a closing '>' to terminate the type.

toplevel: TYPE ID EQ UID LT INT_LITERAL PLUS INCLUDE
##
## Ends in an error in state: 39.
##
## int_exp -> int_exp PLUS . int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## int_exp PLUS
##

Ill-formed type: expected an integer argument.

toplevel: TYPE ID EQ UID LT INT_LITERAL STAR INCLUDE
##
## Ends in an error in state: 35.
##
## int_exp -> int_exp STAR . int_exp [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## int_exp STAR
##

Ill-formed type: expected an integer argument.

toplevel: TYPE ID EQ UID LT INT_LITERAL INCLUDE
##
## Ends in an error in state: 45.
##
## int_exp -> int_exp . PLUS int_exp [ STAR PLUS MINUS GT ]
## int_exp -> int_exp . MINUS int_exp [ STAR PLUS MINUS GT ]
## int_exp -> int_exp . STAR int_exp [ STAR PLUS MINUS GT ]
## type_expr -> def LT int_exp . GT [ TYPE STAR RPAREN RECFUN RBRACK RBRACE INCLUDE IMPORT GT FUN FORMAT EQ EOF CONST COMMA COLONEQ BITFIELD BAR AND ]
##
## The known suffix of the stack is as follows:
## def LT int_exp
##

Ill-formed type: expected a closing '>' to terminate the type.

toplevel: TYPE ID EQ UID LT INT_LITERAL STAR LPAREN INCLUDE
##
## Ends in an error in state: 36.
##
## int_exp -> LPAREN . int_exp RPAREN [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed type: expected an integer argument.

toplevel: TYPE ID EQ UID LT LPAREN INT_LITERAL INCLUDE
##
## Ends in an error in state: 34.
##
## int_exp -> int_exp . PLUS int_exp [ STAR RPAREN PLUS MINUS ]
## int_exp -> int_exp . MINUS int_exp [ STAR RPAREN PLUS MINUS ]
## int_exp -> int_exp . STAR int_exp [ STAR RPAREN PLUS MINUS ]
## int_exp -> LPAREN int_exp . RPAREN [ STAR RRBRACK RPAREN RBRACE PLUS MINUS GT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN int_exp
##

Ill-formed type argument: there might be a missing closing ')'.

toplevel: TYPE ID EQ UID LT LPAREN INCLUDE
##
## Ends in an error in state: 26.
##
## int_exp -> LPAREN . int_exp RPAREN [ STAR RPAREN PLUS MINUS GT ]
## type_expr -> LPAREN . loption(separated_nonempty_list(COMMA,type_expr)) RPAREN [ RPAREN GT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed type: expected an integer argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LLBRACK INT_LITERAL COLON INT_LITERAL INCLUDE
##
## Ends in an error in state: 160.
##
## expr -> expr LLBRACK int_exp COLON int_exp . RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## int_exp -> int_exp . PLUS int_exp [ STAR RRBRACK PLUS MINUS ]
## int_exp -> int_exp . MINUS int_exp [ STAR RRBRACK PLUS MINUS ]
## int_exp -> int_exp . STAR int_exp [ STAR RRBRACK PLUS MINUS ]
##
## The known suffix of the stack is as follows:
## expr LLBRACK int_exp COLON int_exp
##

Ill-formed bitrange: there might be a missing ']]' to terminate the bitrange.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LLBRACK INT_LITERAL COLON INCLUDE
##
## Ends in an error in state: 159.
##
## expr -> expr LLBRACK int_exp COLON . int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LLBRACK int_exp COLON
##

Ill-formed bitrange: expected a second numerical bitrange argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LLBRACK INT_LITERAL INCLUDE
##
## Ends in an error in state: 157.
##
## expr -> expr LLBRACK int_exp . COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr LLBRACK int_exp . RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## int_exp -> int_exp . PLUS int_exp [ STAR RRBRACK PLUS MINUS COLON ]
## int_exp -> int_exp . MINUS int_exp [ STAR RRBRACK PLUS MINUS COLON ]
## int_exp -> int_exp . STAR int_exp [ STAR RRBRACK PLUS MINUS COLON ]
##
## The known suffix of the stack is as follows:
## expr LLBRACK int_exp
##

Ill-formed bitrange: bad numerical expression as first range argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LLBRACK INCLUDE
##
## Ends in an error in state: 156.
##
## expr -> expr LLBRACK . int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr LLBRACK . int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LLBRACK
##

Ill-formed bitrange: expected a numerical argument.

toplevel: BITFIELD ID EQ LBRACE ID COLON INT_LITERAL COLON INT_LITERAL INCLUDE
##
## Ends in an error in state: 581.
##
## bit_range_field -> ident COLON int_exp COLON int_exp . [ RBRACE COMMA ]
## int_exp -> int_exp . PLUS int_exp [ STAR RBRACE PLUS MINUS COMMA ]
## int_exp -> int_exp . MINUS int_exp [ STAR RBRACE PLUS MINUS COMMA ]
## int_exp -> int_exp . STAR int_exp [ STAR RBRACE PLUS MINUS COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON int_exp COLON int_exp
##

Ill-formed bitfield: expected a comma or right brace.

toplevel: BITFIELD ID EQ LBRACE ID COLON INT_LITERAL COLON INCLUDE
##
## Ends in an error in state: 580.
##
## bit_range_field -> ident COLON int_exp COLON . int_exp [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON int_exp COLON
##

Ill-formed bitfield: expected terminating index of bitfield range.

toplevel: BITFIELD ID EQ LBRACE ID COLON INT_LITERAL COMMA INCLUDE
##
## Ends in an error in state: 585.
##
## separated_nonempty_list(COMMA,bit_range_field) -> bit_range_field COMMA . separated_nonempty_list(COMMA,bit_range_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## bit_range_field COMMA
##

Ill-formed bitfield: expected a field name.

toplevel: BITFIELD ID EQ LBRACE ID COLON INT_LITERAL INCLUDE
##
## Ends in an error in state: 579.
##
## bit_range_field -> ident COLON int_exp . [ RBRACE COMMA ]
## bit_range_field -> ident COLON int_exp . COLON int_exp [ RBRACE COMMA ]
## int_exp -> int_exp . PLUS int_exp [ STAR RBRACE PLUS MINUS COMMA COLON ]
## int_exp -> int_exp . MINUS int_exp [ STAR RBRACE PLUS MINUS COMMA COLON ]
## int_exp -> int_exp . STAR int_exp [ STAR RBRACE PLUS MINUS COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ident COLON int_exp
##

Ill-formed bitfield: expected a comma or a colon preceding a terminating index.

toplevel: BITFIELD ID EQ LBRACE ID COLON INCLUDE
##
## Ends in an error in state: 578.
##
## bit_range_field -> ident COLON . int_exp [ RBRACE COMMA ]
## bit_range_field -> ident COLON . int_exp COLON int_exp [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed bitfield: expected a numerical index.

toplevel: BITFIELD ID EQ LBRACE ID INCLUDE
##
## Ends in an error in state: 577.
##
## bit_range_field -> ident . COLON int_exp [ RBRACE COMMA ]
## bit_range_field -> ident . COLON int_exp COLON int_exp [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed bitfield: expected a colon.

toplevel: BITFIELD ID EQ LBRACE INCLUDE
##
## Ends in an error in state: 574.
##
## bitfield -> ident EQ LBRACE . bit_range_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident EQ LBRACE
##

Ill-formed bitfield: expected a field name.

toplevel: BITFIELD ID EQ INCLUDE
##
## Ends in an error in state: 573.
##
## bitfield -> ident EQ . LBRACE bit_range_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed bitfield: expected a left brace.

toplevel: BITFIELD ID INCLUDE
##
## Ends in an error in state: 572.
##
## bitfield -> ident . EQ LBRACE bit_range_fields RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed bitfield: expected an equals character.

toplevel: BITFIELD INCLUDE
##
## Ends in an error in state: 571.
##
## type_decls -> BITFIELD . bitfield [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## BITFIELD
##

Ill-formed bitfield: expected a bitfield name.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK ID ARROW ID LPAREN LITERAL INCLUDE
##
## Ends in an error in state: 145.
##
## expr -> ident ARROW ident LPAREN expr . RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
##
## The known suffix of the stack is as follows:
## ident ARROW ident LPAREN expr
##

Ill-formed argument for bitfield record operator: there might be a missing right parenthesis.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK ID ARROW ID LPAREN INCLUDE
##
## Ends in an error in state: 144.
##
## expr -> ident ARROW ident LPAREN . expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## ident ARROW ident LPAREN
##

Ill-formed argument for bitfield record operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK ID ARROW ID INCLUDE
##
## Ends in an error in state: 143.
##
## expr -> ident ARROW ident . LPAREN expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## ident ARROW ident
##

The argument for a bitfield record operator needs a preceding left parenthesis.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK ID ARROW INCLUDE
##
## Ends in an error in state: 142.
##
## expr -> ident ARROW . ident LPAREN expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## ident ARROW
##

Ill-formed name for a bitfield record operator.

toplevel: FORMAT LBRACE UID COLONEQ ALIGN LT INT_LITERAL USE_BITFIELD
##
## Ends in an error in state: 496.
##
## int_exp -> int_exp . PLUS int_exp [ STAR PLUS MINUS GT ]
## int_exp -> int_exp . MINUS int_exp [ STAR PLUS MINUS GT ]
## int_exp -> int_exp . STAR int_exp [ STAR PLUS MINUS GT ]
## rule_elem -> ALIGN LT int_exp . GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## ALIGN LT int_exp
##

Ill-formed alignment width: there might be missing '>' to terminate the width specifier.

toplevel: FORMAT LBRACE UID COLONEQ ALIGN LT USE_BITFIELD
##
## Ends in an error in state: 495.
##
## rule_elem -> ALIGN LT . int_exp GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## ALIGN LT
##

Ill-formed alignment width: expected a numerical literal.

toplevel: FORMAT LBRACE UID COLONEQ ALIGN USE_BITFIELD
##
## Ends in an error in state: 494.
##
## rule_elem -> ALIGN . LT int_exp GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## ALIGN
##

Ill-formed alignment: expected an opening '<' preceding a numerical alignment width.

toplevel: FORMAT LBRACE UID COLONEQ PAD LT INT_LITERAL COMMA BV_LITERAL USE_BITFIELD
##
## Ends in an error in state: 424.
##
## rule_elem -> PAD LT int_exp COMMA BV_LITERAL . GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## PAD LT int_exp COMMA BV_LITERAL
##

Ill-formed pad specifier: expected a terminating '>'.

toplevel: FORMAT LBRACE UID COLONEQ PAD LT INT_LITERAL COMMA USE_BITFIELD
##
## Ends in an error in state: 423.
##
## rule_elem -> PAD LT int_exp COMMA . BV_LITERAL GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## PAD LT int_exp COMMA
##

Ill-formed padding specifier: expected a bitvector literal.

toplevel: FORMAT LBRACE UID COLONEQ PAD LT INT_LITERAL USE_BITFIELD
##
## Ends in an error in state: 422.
##
## int_exp -> int_exp . PLUS int_exp [ STAR PLUS MINUS COMMA ]
## int_exp -> int_exp . MINUS int_exp [ STAR PLUS MINUS COMMA ]
## int_exp -> int_exp . STAR int_exp [ STAR PLUS MINUS COMMA ]
## rule_elem -> PAD LT int_exp . COMMA BV_LITERAL GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## PAD LT int_exp
##

Ill-formed pad specifier: expected a comma between the width and a bitvector literal.

toplevel: FORMAT LBRACE UID COLONEQ PAD LT USE_BITFIELD
##
## Ends in an error in state: 421.
##
## rule_elem -> PAD LT . int_exp COMMA BV_LITERAL GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## PAD LT
##

Ill-formed pad specifier: expected a numerical width.

toplevel: FORMAT LBRACE UID COLONEQ PAD USE_BITFIELD
##
## Ends in an error in state: 420.
##
## rule_elem -> PAD . LT int_exp COMMA BV_LITERAL GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## PAD
##

Ill-formed pad specifier: expected a '<' preceding a numerical width.

toplevel: FORMAT LBRACE UID COLONEQ UID LT INT_LITERAL USE_BITFIELD
##
## Ends in an error in state: 364.
##
## int_exp -> int_exp . PLUS int_exp [ STAR PLUS MINUS GT ]
## int_exp -> int_exp . MINUS int_exp [ STAR PLUS MINUS GT ]
## int_exp -> int_exp . STAR int_exp [ STAR PLUS MINUS GT ]
## rule_elem -> UID LT int_exp . GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## UID LT int_exp
##

Ill-formed non-terminal width specifier: expected a terminating '>'.

toplevel: FORMAT LBRACE UID COLONEQ USE_BITFIELD LPAREN ID USE_BITFIELD
##
## Ends in an error in state: 347.
##
## rule_elem -> USE_BITFIELD LPAREN ident . RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## USE_BITFIELD LPAREN ident
##

Ill-formed bitfield use specifier: expected a terminating ')'.

toplevel: FORMAT LBRACE UID COLONEQ USE_BITFIELD LPAREN USE_BITFIELD
##
## Ends in an error in state: 346.
##
## rule_elem -> USE_BITFIELD LPAREN . ident RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## USE_BITFIELD LPAREN
##

Ill-formed bitfield use specifier: expected an identifier for a type.

toplevel: FORMAT LBRACE UID COLONEQ USE_BITFIELD USE_BITFIELD
##
## Ends in an error in state: 345.
##
## rule_elem -> USE_BITFIELD . LPAREN ident RPAREN [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## USE_BITFIELD
##

Ill-formed bitfield use specifier: expected an opening '('.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL AND_B USE_BITFIELD
##
## Ends in an error in state: 178.
##
## expr -> expr AND_B . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr AND_B
##

Ill-formed expression: expected a bitvector argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL BAR_B USE_BITFIELD
##
## Ends in an error in state: 176.
##
## expr -> expr BAR_B . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr BAR_B
##

Ill-formed expression: expected a bitvector argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK TILDE USE_BITFIELD
##
## Ends in an error in state: 100.
##
## expr -> TILDE . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Ill-formed expression: expected a bitvector argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE COLONCOLON UNDERSCORE USE_BITFIELD
##
## Ends in an error in state: 120.
##
## pattern -> pattern . COLONCOLON pattern [ RPAREN EQ COMMA COLONCOLON ARROW ]
## pattern -> pattern COLONCOLON pattern . [ RPAREN EQ COMMA COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## pattern COLONCOLON pattern
##

Ill-formed pattern: unexpected operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE COLONCOLON USE_BITFIELD
##
## Ends in an error in state: 119.
##
## pattern -> pattern COLONCOLON . pattern [ RPAREN EQ COMMA COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## pattern COLONCOLON
##

Ill-formed pattern argument for list pattern.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL USE_BITFIELD
##
## Ends in an error in state: 418.
##
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## rule_elem -> SET_VIEW expr . RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SET_VIEW expr
##

Ill-formed expression argument for set-view operator.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW USE_BITFIELD
##
## Ends in an error in state: 417.
##
## rule_elem -> SET_VIEW . expr RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SET_VIEW
##

Ill-formed argument for set-view operator: expected an expression.

toplevel: CONST ID COLON TVAR EQ LITERAL USE_BITFIELD
##
## Ends in an error in state: 570.
##
## expr -> expr . DOT ident [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LAND expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LOR expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . AT expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . STAR expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . MOD expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . DIV expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LT expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . GT expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . EQ expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ TYPE STAR RECFUN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND INCLUDE IMPORT GTEQ GT FUN FORMAT EQ EOF DOT DIV CONSTR_MATCH CONST COLONCOLON BITFIELD BAR_B AT AND_B ]
## pre_decl -> CONST ident COLON type_expr EQ expr . [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## CONST ident COLON type_expr EQ expr
##

Ill-formed expression value for constant declaration.

toplevel: CONST ID COLON TVAR EQ USE_BITFIELD
##
## Ends in an error in state: 569.
##
## pre_decl -> CONST ident COLON type_expr EQ . expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## CONST ident COLON type_expr EQ
##

Invalid expression for constant declaration.

toplevel: CONST ID COLON TVAR USE_BITFIELD
##
## Ends in an error in state: 568.
##
## pre_decl -> CONST ident COLON type_expr . EQ expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## CONST ident COLON type_expr
##

Ill-formed constant declaration: expected an equals sign.

toplevel: CONST ID COLON USE_BITFIELD
##
## Ends in an error in state: 567.
##
## pre_decl -> CONST ident COLON . type_expr EQ expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## CONST ident COLON
##

Ill-formed constant declaration: expected a type expression.

toplevel: CONST ID USE_BITFIELD
##
## Ends in an error in state: 566.
##
## pre_decl -> CONST ident . COLON type_expr EQ expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## CONST ident
##

Ill-formed constant declaration: expected a colon.

toplevel: CONST USE_BITFIELD
##
## Ends in an error in state: 565.
##
## pre_decl -> CONST . ident COLON type_expr EQ expr [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## CONST
##

Ill-formed constant declaration: expected an identifier.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW EXCLAIM LITERAL UNDERSCORE
##
## Ends in an error in state: 207.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> EXCLAIM expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## EXCLAIM expr
##

Ill-formed expression for operator argument.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW ID UNDERSCORE
##
## Ends in an error in state: 141.
##
## expr -> ident . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> ident . ARROW ident LPAREN expr RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LET UNDERSCORE EQ LITERAL IN LITERAL UNDERSCORE
##
## Ends in an error in state: 225.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> LET pattern EQ expr IN expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL AND_B LITERAL UNDERSCORE
##
## Ends in an error in state: 179.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr AND_B expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr AND_B expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL AT LITERAL UNDERSCORE
##
## Ends in an error in state: 187.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr AT expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr AT expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL BAR_B LITERAL UNDERSCORE
##
## Ends in an error in state: 177.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr BAR_B expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr BAR_B expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL COLONCOLON LITERAL UNDERSCORE
##
## Ends in an error in state: 185.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr COLONCOLON expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr COLONCOLON expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL DIV LITERAL UNDERSCORE
##
## Ends in an error in state: 175.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr DIV expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL EQ LITERAL UNDERSCORE
##
## Ends in an error in state: 199.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr EQ expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL GT LITERAL UNDERSCORE
##
## Ends in an error in state: 197.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr GT expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL GTEQ LITERAL UNDERSCORE
##
## Ends in an error in state: 195.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr GTEQ expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr GTEQ expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL LAND LITERAL UNDERSCORE
##
## Ends in an error in state: 203.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr LAND expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LAND expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL LOR LITERAL UNDERSCORE
##
## Ends in an error in state: 193.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr LOR expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LOR expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL LT LITERAL UNDERSCORE
##
## Ends in an error in state: 191.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr LT expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL LTEQ LITERAL UNDERSCORE
##
## Ends in an error in state: 189.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr LTEQ expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr LTEQ expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL MINUS LITERAL UNDERSCORE
##
## Ends in an error in state: 183.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr MINUS expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL NEQ LITERAL UNDERSCORE
##
## Ends in an error in state: 181.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr NEQ expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL PLUS LITERAL UNDERSCORE
##
## Ends in an error in state: 166.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr PLUS expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL PLUS_S LITERAL UNDERSCORE
##
## Ends in an error in state: 153.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr PLUS_S expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr PLUS_S expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW LITERAL STAR LITERAL UNDERSCORE
##
## Ends in an error in state: 147.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr STAR expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr STAR expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW MINUS LITERAL UNDERSCORE
##
## Ends in an error in state: 246.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> MINUS expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ SET_VIEW TILDE LITERAL UNDERSCORE
##
## Ends in an error in state: 247.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> TILDE expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## TILDE expr
##

Ill-formed expression.

toplevel: FORMAT LBRACE DECO ID LPAREN ID COLON RPAREN SEMICOLON USE_BITFIELD
##
## Ends in an error in state: 331.
##
## separated_nonempty_list(SEMICOLON,deco_spec) -> deco_spec SEMICOLON . separated_nonempty_list(SEMICOLON,deco_spec) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## deco_spec SEMICOLON
##

Invalid decorator type.

toplevel: FORMAT LBRACE DECO RBRACK USE_BITFIELD
##
## Ends in an error in state: 334.
##
## format_decl -> option(deco_decl) . nt_defn [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## option(deco_decl)
##

Invalid non-terminal name.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID LARROW USE_BITFIELD
##
## Ends in an error in state: 356.
##
## nt_attr_val -> ident LARROW . LPAREN expr RPAREN [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident LARROW
##

Ill-formed map-views specifier for inherited attribute: expected a '('.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID LARROW LPAREN ID RPAREN USE_BITFIELD
##
## Ends in an error in state: 352.
##
## separated_nonempty_list(COMMA,nt_attr_val) -> nt_attr_val . [ GT ]
## separated_nonempty_list(COMMA,nt_attr_val) -> nt_attr_val . COMMA separated_nonempty_list(COMMA,nt_attr_val) [ GT ]
##
## The known suffix of the stack is as follows:
## nt_attr_val
##

Expected a separator or terminator for inherited attribute specifiers.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID LARROW LPAREN USE_BITFIELD
##
## Ends in an error in state: 357.
##
## nt_attr_val -> ident LARROW LPAREN . expr RPAREN [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident LARROW LPAREN
##

Ill-formed inherited attribute specifier: expected an expression.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID LARROW LPAREN ID USE_BITFIELD
##
## Ends in an error in state: 358.
##
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## nt_attr_val -> ident LARROW LPAREN expr . RPAREN [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident LARROW LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
##

Ill-formed inherited attribute specifier: ill-formed expression.

toplevel: RECFUN USE_BITFIELD
##
## Ends in an error in state: 80.
##
## pre_decl -> RECFUN . separated_nonempty_list(AND,recfun_decl) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## RECFUN
##

Ill-formed recursive function definition: expected a function identifier.

toplevel: RECFUN ID LPAREN RPAREN ARROW ID EQ LBRACE ID RBRACE USE_BITFIELD
##
## Ends in an error in state: 82.
##
## separated_nonempty_list(AND,recfun_decl) -> recfun_decl . [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## separated_nonempty_list(AND,recfun_decl) -> recfun_decl . AND separated_nonempty_list(AND,recfun_decl) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## recfun_decl
##

Ill-formed definition: expected a top-level definition or 'and' to define a mutually recursive function).

toplevel: RECFUN ID LPAREN RPAREN ARROW ID EQ LBRACE ID RBRACE AND USE_BITFIELD
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(AND,recfun_decl) -> recfun_decl AND . separated_nonempty_list(AND,recfun_decl) [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## recfun_decl AND
##

Ill-formed recursive function definition: expected a function identifier.

toplevel: CONST ID COLON ID EQ ID MOD USE_BITFIELD
##
## Ends in an error in state: 154.
##
## expr -> expr MOD . expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

Ill-formed expression: expected an expression after an operator.

toplevel: CONST ID COLON ID EQ ID MOD BV_LITERAL UNDERSCORE
##
## Ends in an error in state: 155.
##
## expr -> expr . DOT ident [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LBRACK expr RBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LLBRACK int_exp RRBRACK [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LAND expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LOR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . CONSTR_MATCH CONSTR [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS_S expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . BAR_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AND_B expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . PLUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . AT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MINUS expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . STAR expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . MOD expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr MOD expr . [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . DIV expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GT expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . LTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . GTEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . EQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . NEQ expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
## expr -> expr . COLONCOLON expr [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr MOD expr
##

Ill-formed expression: perhaps an expression was not terminated properly?

toplevel: FORMAT LBRACE UID COLONEQ SLASH_SF_LBRACK USE_BITFIELD
##
## Ends in an error in state: 411.
##
## rule_elem -> SLASH_SF_LBRACK . LITERAL RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SLASH_SF_LBRACK
##

Ill-formed scan rule element: expected a literal scan tag or a view expression.

toplevel: FORMAT LBRACE UID COLONEQ SLASH_SF_LBRACK LITERAL USE_BITFIELD
##
## Ends in an error in state: 412.
##
## rule_elem -> SLASH_SF_LBRACK LITERAL . RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SLASH_SF_LBRACK LITERAL
##

Ill-formed terminator for scan rule element: expected a ']'.

toplevel: FORMAT LBRACE UID COLONEQ SLASH_SB_LBRACK USE_BITFIELD
##
## Ends in an error in state: 414.
##
## rule_elem -> SLASH_SB_LBRACK . LITERAL RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SLASH_SB_LBRACK
##

Ill-formed scan rule element: expected a literal scan tag or a view expression.

toplevel: FORMAT LBRACE UID COLONEQ SLASH_SB_LBRACK LITERAL USE_BITFIELD
##
## Ends in an error in state: 415.
##
## rule_elem -> SLASH_SB_LBRACK LITERAL . RBRACK [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## SLASH_SB_LBRACK LITERAL
##

Ill-formed terminator for scan rule element: expected a ']'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE PRINT USE_BITFIELD
##
## Ends in an error in state: 431.
##
## stmt -> PRINT . LPAREN expr RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## PRINT
##

Ill-formed print statement: expected a '(' after '$print'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE PRINT LPAREN USE_BITFIELD
##
## Ends in an error in state: 432.
##
## stmt -> PRINT LPAREN . expr RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN
##

Ill-formed print statement: expected an expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE PRINT LPAREN ID USE_BITFIELD
##
## Ends in an error in state: 433.
##
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR_B AT AND_B ]
## stmt -> PRINT LPAREN expr . RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
##

Ill-formed argument in print statement: there might be a missing closing ')'.

toplevel: CONST ID COLON ID EQ LBRACE UID USE_BITFIELD
##
## Ends in an error in state: 129.
##
## rec_exp_field -> UID . DOT ident COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed field expression: expected a '.' to indicate a module dereference (or there may be an erroneous capitalization of an identifier).

toplevel: CONST ID COLON ID EQ LBRACE UID DOT USE_BITFIELD
##
## Ends in an error in state: 130.
##
## rec_exp_field -> UID DOT . ident COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## UID DOT
##

Ill-formed field expression: expected a lower-case identifier to specify a field component of a module.

toplevel: CONST ID COLON ID EQ LBRACE UID DOT ID USE_BITFIELD
##
## Ends in an error in state: 131.
##
## rec_exp_field -> UID DOT ident . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## UID DOT ident
##

Ill-formed field expression: expected a colon ':' before a field initializer.

toplevel: CONST ID COLON ID EQ LBRACE UID DOT ID COLON USE_BITFIELD
##
## Ends in an error in state: 132.
##
## rec_exp_field -> UID DOT ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## UID DOT ident COLON
##

Ill-formed field expression: expected an expression as a field initializer.

toplevel: CONST ID COLON ID EQ ID DOT LPAREN USE_BITFIELD
##
## Ends in an error in state: 168.
##
## expr -> expr DOT LPAREN . UID DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DOT LPAREN
##

Ill-formed field expression: expected an uppercase identifier for a module name.

toplevel: CONST ID COLON ID EQ ID DOT LPAREN UID USE_BITFIELD
##
## Ends in an error in state: 169.
##
## expr -> expr DOT LPAREN UID . DOT ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DOT LPAREN UID
##

Ill-formed field expression: expected a '.' to indicate a module dereference.

toplevel: CONST ID COLON ID EQ ID DOT LPAREN UID DOT USE_BITFIELD
##
## Ends in an error in state: 170.
##
## expr -> expr DOT LPAREN UID DOT . ident RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DOT LPAREN UID DOT
##

Ill-formed field expression: expected a lower-case identifier to specify a field component of a module.

toplevel: CONST ID COLON ID EQ ID DOT LPAREN UID DOT ID USE_BITFIELD
##
## Ends in an error in state: 171.
##
## expr -> expr DOT LPAREN UID DOT ident . RPAREN [ USE_BITFIELD UID TYPE SYN_END SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RPARBAR RECFUN RBRACK RBRACE QUESTION PLUS_S PLUS PAD OF NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LBRACE LAND INCLUDE IN IMPORT ID HASH GTEQ GT FUN FORMAT EXCLAIM EQ EPSILON EOF DOT DIV CONSTR_MATCH CONST COMMA COLONCOLON COLON CARET BITFIELD BAR_B BAR AT_VIEW AT_POS AT_MAP AT AND_B ALIGN ]
##
## The known suffix of the stack is as follows:
## expr DOT LPAREN UID DOT ident
##

Ill-formed field expression: expected a ')' to close the cross-module field access expression.

toplevel: CONST ID COLON ID EQ LBRACE UID DOT ID COLON ID USE_BITFIELD
##
## Ends in an error in state: 208.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DOT LPAREN UID DOT ident RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp COLON int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LLBRACK int_exp RRBRACK [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . BAR_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AND_B expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . MOD expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MOD MINUS LTEQ LT LPAREN LOR LLBRACK LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON BAR_B AT AND_B ]
## rec_exp_field -> UID DOT ident COLON expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## UID DOT ident COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production expr -> ident
##

Ill-formed expression for field initializer.

toplevel: FORMAT LBRACE UID COLONEQ UID DOT USE_BITFIELD
##
## Ends in an error in state: 366.
##
## rule_elem -> UID DOT . UID option(nt_args) [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## UID DOT
##

Ill-formed module component: expected a lower-case identifier to specify a non-terminal component of a module.

toplevel: FORMAT LBRACE UID COLONEQ UID DOT UID INCLUDE
##
## Ends in an error in state: 367.
##
## rule_elem -> UID DOT UID . option(nt_args) [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## UID DOT UID
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ UID DOT UID LT USE_BITFIELD
##
## Ends in an error in state: 368.
##
## nt_args -> LT . loption(separated_nonempty_list(COMMA,nt_attr_val)) GT [ USE_BITFIELD UID SYN_BEGIN STAR SLASH_SF_LBRACK SLASH_SB_LBRACK SET_VIEW SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS PAD LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_VIEW AT_POS AT_MAP ALIGN ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed inherited attribute specifier: expected an attribute identifier after the '<'.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID USE_BITFIELD
##
## Ends in an error in state: 373.
##
## regexp -> UID . [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> UID . DOT UID [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID DOT USE_BITFIELD
##
## Ends in an error in state: 374.
##
## regexp -> UID DOT . UID [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## UID DOT
##

Ill-formed regular expression: expected an upper-case identifier to specify a non-terminal component of a module.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM UID USE_BITFIELD
##
## Ends in an error in state: 378.
##
## literal_set -> UID . [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## literal_set -> UID . DOT UID [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed literal specifier.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM UID DOT USE_BITFIELD
##
## Ends in an error in state: 379.
##
## literal_set -> UID DOT . UID [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## UID DOT
##

Ill-formed literal: expected an upper-case identifier to specify a non-terminal component of a module.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LPAREN LITERAL UID
##
## Ends in an error in state: 389.
##
## literal_set -> literal_set . BACKSLASH literal_set [ RPAREN BACKSLASH ]
## literal_set -> LPAREN literal_set . RPAREN [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LPAREN literal_set
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 382, spurious reduction of production separated_nonempty_list(BAR,LITERAL) -> LITERAL
## In state 388, spurious reduction of production literal_set -> separated_nonempty_list(BAR,LITERAL)
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LBRACK LITERAL UID
##
## Ends in an error in state: 393.
##
## literal_set -> literal_set . BACKSLASH literal_set [ RBRACK BACKSLASH ]
## regexp -> LBRACK literal_set . RBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## LBRACK literal_set
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 382, spurious reduction of production separated_nonempty_list(BAR,LITERAL) -> LITERAL
## In state 388, spurious reduction of production literal_set -> separated_nonempty_list(BAR,LITERAL)
##

Ill-formed literal.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LPAREN HASH SYN_END
##
## Ends in an error in state: 396.
##
## list(regexp) -> regexp . list(regexp) [ RPAREN ]
## regexp -> regexp . STAR [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . CARET expr [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . PLUS [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . QUESTION [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . BAR regexp [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN HASH BAR HASH USE_BITFIELD
##
## Ends in an error in state: 403.
##
## regexp -> regexp . STAR [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . CARET expr [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . PLUS [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . QUESTION [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . BAR regexp [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp BAR regexp . [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp BAR regexp
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN HASH RPAREN
##
## Ends in an error in state: 407.
##
## nonempty_list(regexp) -> regexp . [ SYN_END ]
## nonempty_list(regexp) -> regexp . nonempty_list(regexp) [ SYN_END ]
## regexp -> regexp . STAR [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . CARET expr [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . PLUS [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . QUESTION [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . BAR regexp [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL RPAREN
##
## Ends in an error in state: 480.
##
## list(literal_set) -> literal_set . list(literal_set) [ EXCLAIM ]
## literal_set -> literal_set . BACKSLASH literal_set [ UID LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## literal_set
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 382, spurious reduction of production separated_nonempty_list(BAR,LITERAL) -> LITERAL
## In state 388, spurious reduction of production literal_set -> separated_nonempty_list(BAR,LITERAL)
##

Ill-formed literal set.

toplevel: IMPORT USE_BITFIELD
##
## Ends in an error in state: 275.
##
## pre_decl -> IMPORT . UID [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
## pre_decl -> IMPORT . LBRACE loption(separated_nonempty_list(COMMA,UID)) RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## IMPORT
##

Ill-formed import declaration: expected a module identifier.

toplevel: IMPORT LBRACE USE_BITFIELD
##
## Ends in an error in state: 277.
##
## pre_decl -> IMPORT LBRACE . loption(separated_nonempty_list(COMMA,UID)) RBRACE [ TYPE RECFUN INCLUDE IMPORT FUN FORMAT EOF CONST BITFIELD ]
##
## The known suffix of the stack is as follows:
## IMPORT LBRACE
##

Ill-formed import declaration: expected a module identifier.

toplevel: IMPORT LBRACE UID USE_BITFIELD
##
## Ends in an error in state: 278.
##
## separated_nonempty_list(COMMA,UID) -> UID . [ RBRACE ]
## separated_nonempty_list(COMMA,UID) -> UID . COMMA separated_nonempty_list(COMMA,UID) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed import declaration: did you forget a ',' or a '}' terminator?

toplevel: IMPORT LBRACE UID COMMA USE_BITFIELD
##
## Ends in an error in state: 279.
##
## separated_nonempty_list(COMMA,UID) -> UID COMMA . separated_nonempty_list(COMMA,UID) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## UID COMMA
##

Ill-formed import declaration: expected a module identifier.
