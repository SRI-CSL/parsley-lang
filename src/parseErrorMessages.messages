toplevel: FORMAT LBRACE ATTR ID LPAREN ID RPAREN RBRACK USE
##
## Ends in an error in state: 268.
##
## format_decl -> option(attr_decl) . nt_defn [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## option(attr_decl)
##

An attribute specification should immediately precede the non-terminal definition to which it applies.

toplevel: FORMAT LBRACE ATTR ID LPAREN UID COLON ID COMMA USE
##
## Ends in an error in state: 265.
##
## separated_nonempty_list(COMMA,attr_arg) -> attr_arg COMMA . separated_nonempty_list(COMMA,attr_arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## attr_arg COMMA
##

Unterminated attribute specification: a key is expected after the ','.

toplevel: FORMAT LBRACE ATTR ID LPAREN UID COLON ID EQ ID USE
##
## Ends in an error in state: 264.
##
## separated_nonempty_list(COMMA,attr_arg) -> attr_arg . [ RPAREN ]
## separated_nonempty_list(COMMA,attr_arg) -> attr_arg . COMMA separated_nonempty_list(COMMA,attr_arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## attr_arg
##

Unterminated keys in attribute specification: perhaps you forgot a ')'?

toplevel: FORMAT LBRACE ATTR ID LPAREN UID COLON ID EQ USE
##
## Ends in an error in state: 262.
##
## attr_arg -> ident EQ . ident [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Unterminated attribute key assignment: a key value is expected after a '='.

toplevel: FORMAT LBRACE ATTR ID LPAREN UID COLON ID USE
##
## Ends in an error in state: 261.
##
## attr_arg -> ident . EQ ident [ RPAREN COMMA ]
## attr_arg -> ident . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Unterminated keys in attribute specification: perhaps you forgot a ')'?

toplevel: FORMAT LBRACE ATTR ID LPAREN UID COLON RPAREN USE
##
## Ends in an error in state: 259.
##
## attr_decl -> ATTR ident LPAREN def COLON loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN . RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR ident LPAREN def COLON loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN
##

Unterminated keys in attribute specification (omit the colon (:) to specify no keys).

toplevel: FORMAT LBRACE ATTR ID LPAREN UID COLON USE
##
## Ends in an error in state: 256.
##
## attr_decl -> ATTR ident LPAREN def COLON . loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR ident LPAREN def COLON
##

Unterminated keys in attribute specification (omit the colon (:) to specify no keys).

toplevel: FORMAT LBRACE ATTR ID LPAREN UID RPAREN USE
##
## Ends in an error in state: 254.
##
## attr_decl -> ATTR ident LPAREN def RPAREN . RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR ident LPAREN def RPAREN
##

Unterminated attribute specification: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE ATTR ID LPAREN UID USE
##
## Ends in an error in state: 253.
##
## attr_decl -> ATTR ident LPAREN def . COLON loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN RBRACK [ UID ]
## attr_decl -> ATTR ident LPAREN def . RPAREN RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR ident LPAREN def
##

Unterminated keys in attribute specification.

toplevel: FORMAT LBRACE ATTR ID LPAREN USE
##
## Ends in an error in state: 251.
##
## attr_decl -> ATTR ident LPAREN . def COLON loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN RBRACK [ UID ]
## attr_decl -> ATTR ident LPAREN . def RPAREN RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR ident LPAREN
##

Unterminated attribute specification: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE ATTR ID USE
##
## Ends in an error in state: 250.
##
## attr_decl -> ATTR ident . LPAREN def COLON loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN RBRACK [ UID ]
## attr_decl -> ATTR ident . LPAREN def RPAREN RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR ident
##

Unspecified primary key in attribute specification.

toplevel: FORMAT LBRACE ATTR USE
##
## Ends in an error in state: 249.
##
## attr_decl -> ATTR . ident LPAREN def COLON loption(separated_nonempty_list(COMMA,attr_arg)) RPAREN RBRACK [ UID ]
## attr_decl -> ATTR . ident LPAREN def RPAREN RBRACK [ UID ]
##
## The known suffix of the stack is as follows:
## ATTR
##

An attribute name is expected in an attribute specification.

toplevel: FORMAT LBRACE UID COLONEQ AT_BUF LITERAL COMMA UID UID
##
## Ends in an error in state: 391.
##
## rule_elem -> rule_elem . BAR rule_elem [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . STAR [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . CARET expr [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . PLUS [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . QUESTION [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> AT_BUF expr COMMA rule_elem . RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_BUF expr COMMA rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 279, spurious reduction of production option(nt_args) -> 
## In state 290, spurious reduction of production rule_elem -> UID option(nt_args) 
##

A view-restricted parse can only be applied to a single rule element: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE UID COLONEQ AT_BUF LITERAL COMMA USE
##
## Ends in an error in state: 390.
##
## rule_elem -> AT_BUF expr COMMA . rule_elem RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_BUF expr COMMA
##

A view-restricted parse requires a rule element to follow the ',' after the position expression.

toplevel: FORMAT LBRACE UID COLONEQ AT_BUF LITERAL USE
##
## Ends in an error in state: 389.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## rule_elem -> AT_BUF expr . COMMA rule_elem RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_BUF expr
##

A view-restricted parse requires a ',' to follow the position expression.

toplevel: FORMAT LBRACE UID COLONEQ AT_BUF USE
##
## Ends in an error in state: 388.
##
## rule_elem -> AT_BUF . expr COMMA rule_elem RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_BUF
##

A position expression was expected for the view-restricted parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP LITERAL COMMA UID UID
##
## Ends in an error in state: 403.
##
## rule_elem -> rule_elem . BAR rule_elem [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . STAR [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . CARET expr [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . PLUS [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . QUESTION [ STAR RBRACK QUESTION PLUS CARET BAR ]
## rule_elem -> AT_MAP expr COMMA rule_elem . RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_MAP expr COMMA rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 279, spurious reduction of production option(nt_args) -> 
## In state 290, spurious reduction of production rule_elem -> UID option(nt_args) 
##

A view-restricted parse can only be applied to a single rule element: perhaps you forgot a ']'?

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP LITERAL COMMA USE
##
## Ends in an error in state: 387.
##
## rule_elem -> AT_MAP expr COMMA . rule_elem RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_MAP expr COMMA
##

A rule-element was expected after the ',' for the view-restricted parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP LITERAL USE
##
## Ends in an error in state: 386.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## rule_elem -> AT_MAP expr . COMMA rule_elem RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_MAP expr
##

Ill-formed view-map restricted parse: perhaps you forgot a ',' after the view expression?

toplevel: FORMAT LBRACE UID COLONEQ AT_MAP USE
##
## Ends in an error in state: 385.
##
## rule_elem -> AT_MAP . expr COMMA rule_elem RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_MAP
##

A position expression was expected for the view-restricted parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_POS LITERAL COMMA UID UID
##
## Ends in an error in state: 405.
##
## rule_elem -> rule_elem . BAR rule_elem [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . STAR [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . CARET expr [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . PLUS [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> rule_elem . QUESTION [ STAR RPAREN QUESTION PLUS CARET BAR ]
## rule_elem -> AT_POS expr COMMA rule_elem . RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_POS expr COMMA rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 279, spurious reduction of production option(nt_args) -> 
## In state 290, spurious reduction of production rule_elem -> UID option(nt_args) 
##

Ill-formed positioned parse: perhaps you forgot a ']' after the parsing rule?

toplevel: FORMAT LBRACE UID COLONEQ AT_POS LITERAL COMMA USE
##
## Ends in an error in state: 384.
##
## rule_elem -> AT_POS expr COMMA . rule_elem RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_POS expr COMMA
##

A rule element was expected after the ',' in the positioned parse.

toplevel: FORMAT LBRACE UID COLONEQ AT_POS LITERAL USE
##
## Ends in an error in state: 383.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## rule_elem -> AT_POS expr . COMMA rule_elem RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_POS expr
##

Ill-formed positioned parse: perhaps you forgot a ',' after the position expression?

toplevel: FORMAT LBRACE UID COLONEQ AT_POS USE
##
## Ends in an error in state: 382.
##
## rule_elem -> AT_POS . expr COMMA rule_elem RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## AT_POS
##

A position expression was expected for a positioned parse.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL BAR LITERAL USE
##
## Ends in an error in state: 302.
##
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . BAR separated_nonempty_list(BAR,LITERAL) [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL
##

Invalid separator in literal set: perhaps you forgot a '|'?

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL BAR USE
##
## Ends in an error in state: 301.
##
## separated_nonempty_list(BAR,LITERAL) -> LITERAL BAR . separated_nonempty_list(BAR,LITERAL) [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL BAR
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL DOTDOT USE
##
## Ends in an error in state: 299.
##
## literal_set -> LITERAL DOTDOT . LITERAL [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL DOTDOT
##

Ill-formed literal used to terminate literal range.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LITERAL USE
##
## Ends in an error in state: 298.
##
## literal_set -> LITERAL . DOTDOT LITERAL [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
## separated_nonempty_list(BAR,LITERAL) -> LITERAL . BAR separated_nonempty_list(BAR,LITERAL) [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LITERAL
##

Ill-formed literal in literal set: perhaps you forgot a separator like '..', '|' or '\', or a terminator like ']'?

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LPAREN UID USE
##
## Ends in an error in state: 305.
##
## literal_set -> literal_set . BACKSLASH literal_set [ RPAREN BACKSLASH ]
## literal_set -> LPAREN literal_set . RPAREN [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LPAREN literal_set
##

Ill-formed literal in literal set: perhaps you forgot a separator like '..', '|' or '\', or a terminator like ']'?

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM LPAREN USE
##
## Ends in an error in state: 297.
##
## literal_set -> LPAREN . literal_set RPAREN [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM UID BACKSLASH USE
##
## Ends in an error in state: 307.
##
## literal_set -> literal_set BACKSLASH . literal_set [ UID RPAREN RBRACK LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## literal_set BACKSLASH
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM UID USE
##
## Ends in an error in state: 377.
##
## list(literal_set) -> literal_set . list(literal_set) [ EXCLAIM ]
## literal_set -> literal_set . BACKSLASH literal_set [ UID LPAREN LITERAL EXCLAIM BACKSLASH ]
##
## The known suffix of the stack is as follows:
## literal_set
##

Ill-formed literal in literal set: perhaps you forgot a separator like '..', '|' or '\'?

toplevel: FORMAT LBRACE UID COLONEQ EXCLAIM USE
##
## Ends in an error in state: 376.
##
## rule_elem -> EXCLAIM . list(literal_set) EXCLAIM [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## EXCLAIM
##

Ill-formed literal in literal set.

toplevel: FORMAT LBRACE UID COLONEQ ID EQ EPSILON USE
##
## Ends in an error in state: 402.
##
## rule_elem -> rule_elem . BAR rule_elem [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . STAR [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . CARET expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> ident EQ rule_elem . [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . PLUS [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . QUESTION [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## ident EQ rule_elem
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ ID EQ USE
##
## Ends in an error in state: 401.
##
## rule_elem -> ident EQ . rule_elem [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ ID USE
##
## Ends in an error in state: 400.
##
## rule_elem -> ident . EQ rule_elem [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ ID RPAREN
##
## Ends in an error in state: 346.
##
## separated_nonempty_list(SEMICOLON,stmt) -> stmt . [ SEMISEMI RBRACE ]
## separated_nonempty_list(SEMICOLON,stmt) -> stmt . SEMICOLON separated_nonempty_list(SEMICOLON,stmt) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 357, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr 
##

Ill-formed rhs expression in action statement: perhaps you forgot a ';' or ';;' or a terminating '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ ID SEMICOLON USE
##
## Ends in an error in state: 347.
##
## separated_nonempty_list(SEMICOLON,stmt) -> stmt SEMICOLON . separated_nonempty_list(SEMICOLON,stmt) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt SEMICOLON
##

Ill-formed lhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ LITERAL USE
##
## Ends in an error in state: 357.
##
## expr -> expr . DOT ident [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LAND expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LOR expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . PLUS expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . PLUS_S expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . AT expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . MINUS expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . STAR expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . DIV expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LT expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . GT expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LTEQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . GTEQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . EQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . NEQ expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . COLONCOLON expr [ STAR SEMISEMI SEMICOLON RPAREN RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## stmt -> assign_lhs_expr COLONEQ expr . [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr COLONEQ expr
##

Ill-formed rhs expression in action statement: perhaps you forgot a ';' or ';;' or a terminating '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID COLONEQ USE
##
## Ends in an error in state: 356.
##
## stmt -> assign_lhs_expr COLONEQ . expr [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr COLONEQ
##

Ill-formed rhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID DOT USE
##
## Ends in an error in state: 354.
##
## assign_lhs_expr -> assign_lhs_expr DOT . ident [ LBRACK DOT COLONEQ ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr DOT
##

Ill-formed record field or attribute in lhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID LBRACK LITERAL USE
##
## Ends in an error in state: 352.
##
## assign_lhs_expr -> assign_lhs_expr LBRACK expr . RBRACK [ LBRACK DOT COLONEQ ]
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr LBRACK expr
##

Ill-formed index expression in lhs expression in action statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID LBRACK USE
##
## Ends in an error in state: 351.
##
## assign_lhs_expr -> assign_lhs_expr LBRACK . expr RBRACK [ LBRACK DOT COLONEQ ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr LBRACK
##

Ill-formed lhs expression in action statement: expected an index expression after '['.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE ID USE
##
## Ends in an error in state: 350.
##
## assign_lhs_expr -> assign_lhs_expr . DOT ident [ LBRACK DOT COLONEQ ]
## assign_lhs_expr -> assign_lhs_expr . LBRACK expr RBRACK [ LBRACK DOT COLONEQ ]
## stmt -> assign_lhs_expr . COLONEQ expr [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## assign_lhs_expr
##

Ill-formed lhs expression in action statement: perhaps you forgot a '.', '[' or a ':='?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL IN LBRACE ID COLONEQ ID SEMISEMI
##
## Ends in an error in state: 359.
##
## stmt -> LET pattern EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) . RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 357, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr 
## In state 346, spurious reduction of production separated_nonempty_list(SEMICOLON,stmt) -> stmt 
## In state 358, spurious reduction of production loption(separated_nonempty_list(SEMICOLON,stmt)) -> separated_nonempty_list(SEMICOLON,stmt) 
##

Unterminated record expression: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL IN LBRACE USE
##
## Ends in an error in state: 345.
##
## stmt -> LET pattern EQ expr IN LBRACE . loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN LBRACE
##

Ill-formed statement: expected a statement in statement block.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL IN USE
##
## Ends in an error in state: 344.
##
## stmt -> LET pattern EQ expr IN . stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern EQ expr IN . LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN
##

Ill-formed body for 'let' statement: expected a statement or a statement block.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ LITERAL USE
##
## Ends in an error in state: 343.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## stmt -> LET pattern EQ expr . IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern EQ expr . IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr
##

Ill-formed let statement: error in either the rhs of the binding, or there is a missing 'in' following the rhs of the binding.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE EQ USE
##
## Ends in an error in state: 342.
##
## stmt -> LET pattern EQ . expr IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern EQ . expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ
##

Ill-formed rhs of the binding in the let statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET UNDERSCORE USE
##
## Ends in an error in state: 341.
##
## stmt -> LET pattern . EQ expr IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET pattern . EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET pattern
##

A let binding pattern is followed by '='.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LET USE
##
## Ends in an error in state: 340.
##
## stmt -> LET . pattern EQ expr IN stmt [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
## stmt -> LET . pattern EQ expr IN LBRACE loption(separated_nonempty_list(SEMICOLON,stmt)) RBRACE [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LET
##

Ill-formed let binding pattern.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF BAR USE
##
## Ends in an error in state: 336.
##
## stmt -> LPAREN CASE expr OF option(BAR) . loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF option(BAR)
##

Ill-formed branch pattern in case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW ID COLONEQ ID BAR USE
##
## Ends in an error in state: 369.
##
## separated_nonempty_list(BAR,branchstmt) -> branchstmt BAR . separated_nonempty_list(BAR,branchstmt) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## branchstmt BAR
##

Ill-formed branch pattern in case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW ID COLONEQ ID SEMISEMI
##
## Ends in an error in state: 368.
##
## separated_nonempty_list(BAR,branchstmt) -> branchstmt . [ RPAREN ]
## separated_nonempty_list(BAR,branchstmt) -> branchstmt . BAR separated_nonempty_list(BAR,branchstmt) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## branchstmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 357, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr 
## In state 365, spurious reduction of production branchstmt -> pattern ARROW stmt 
##

Unterminated 'case' expression: perhaps you forgot a ')' terminator?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW LBRACE ID COLONEQ ID SEMISEMI
##
## Ends in an error in state: 363.
##
## branchstmt -> pattern ARROW LBRACE separated_nonempty_list(SEMICOLON,stmt) . RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW LBRACE separated_nonempty_list(SEMICOLON,stmt)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 357, spurious reduction of production stmt -> assign_lhs_expr COLONEQ expr 
## In state 346, spurious reduction of production separated_nonempty_list(SEMICOLON,stmt) -> stmt 
##

Unterminated branch statement block in case statement: perhaps you forgot a terminating '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW LBRACE USE
##
## Ends in an error in state: 362.
##
## branchstmt -> pattern ARROW LBRACE . separated_nonempty_list(SEMICOLON,stmt) RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW LBRACE
##

Ill-formed branch statement block: expected a statement after the '{'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE ARROW USE
##
## Ends in an error in state: 339.
##
## branchstmt -> pattern ARROW . stmt [ RPAREN BAR ]
## branchstmt -> pattern ARROW . LBRACE separated_nonempty_list(SEMICOLON,stmt) RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Ill-formed branch in case statement: expected a statement or statement block after the '->'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF UNDERSCORE USE
##
## Ends in an error in state: 338.
##
## branchstmt -> pattern . ARROW stmt [ RPAREN BAR ]
## branchstmt -> pattern . ARROW LBRACE separated_nonempty_list(SEMICOLON,stmt) RBRACE [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed branch in case statement: perhaps you forgot a '->'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL OF USE
##
## Ends in an error in state: 335.
##
## stmt -> LPAREN CASE expr OF . option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF
##

Ill-formed pattern in branch of case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE LITERAL USE
##
## Ends in an error in state: 334.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## stmt -> LPAREN CASE expr . OF option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr
##

Ill-formed scrutinee expression in case statement: perhaps you forgot an 'of' after the scrutinee?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN CASE USE
##
## Ends in an error in state: 333.
##
## stmt -> LPAREN CASE . expr OF option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE
##

Ill-formed scrutinee expression in case statement.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE LPAREN USE
##
## Ends in an error in state: 332.
##
## stmt -> LPAREN . CASE expr OF option(BAR) loption(separated_nonempty_list(BAR,branchstmt)) RPAREN [ SEMISEMI SEMICOLON RPAREN RBRACE BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed statement: expected a 'case' to follow the '('.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE SEMISEMI LITERAL USE
##
## Ends in an error in state: 373.
##
## action -> loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI expr . [ RBRACE ]
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI expr
##

Ill-formed return expression in action: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACE SEMISEMI USE
##
## Ends in an error in state: 372.
##
## action -> loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI . expr [ RBRACE ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(SEMICOLON,stmt)) SEMISEMI
##

Ill-formed return expression in action.

toplevel: FORMAT LBRACE UID COLONEQ LBRACE USE
##
## Ends in an error in state: 331.
##
## rule_elem -> LBRACE . action RBRACE [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed statement in action.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK CONSTR LPAREN USE
##
## Ends in an error in state: 127.
##
## expr -> CONSTR LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## CONSTR LPAREN
##

Ill-formed argument expression for constructor.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK CONSTR USE
##
## Ends in an error in state: 126.
##
## expr -> CONSTR . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## CONSTR
##

Ill-formed arguments to constructor: did you forget a '(' before the arguments, or a '()' to indicate no arguments?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK EXCLAIM LITERAL USE
##
## Ends in an error in state: 175.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> EXCLAIM expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## EXCLAIM expr
##

Ill-formed argument expression for the '!' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK EXCLAIM USE
##
## Ends in an error in state: 125.
##
## expr -> EXCLAIM . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## EXCLAIM
##

Ill-formed expression: expected an argument for the '!' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID COLON ID COMMA USE
##
## Ends in an error in state: 120.
##
## separated_nonempty_list(COMMA,rec_exp_field) -> rec_exp_field COMMA . separated_nonempty_list(COMMA,rec_exp_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rec_exp_field COMMA
##

Ill-formed record field: perhaps you forgot a '}' to terminate the record?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID COLON LITERAL USE
##
## Ends in an error in state: 176.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## rec_exp_field -> ident COLON expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON expr
##

Ill-formed record field: perhaps you forgot a '}' to terminate the record?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID COLON USE
##
## Ends in an error in state: 123.
##
## rec_exp_field -> ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed value expression in record field: expected an expression after the ':'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE ID USE
##
## Ends in an error in state: 122.
##
## rec_exp_field -> ident . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed record field expression: perhaps you forgot a ':' after the field name?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACE USE
##
## Ends in an error in state: 115.
##
## expr -> LBRACE . rec_exp_fields RBRACE [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record field.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACK LITERAL SEMICOLON USE
##
## Ends in an error in state: 179.
##
## listelems -> expr SEMICOLON . listelems [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON
##

Ill-formed expression for list element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACK LITERAL USE
##
## Ends in an error in state: 178.
##
## expr -> expr . DOT ident [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR SEMICOLON RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## listelems -> expr . SEMICOLON listelems [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## listelems -> expr . RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr
##

Ill-formed expression for list element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LBRACK USE
##
## Ends in an error in state: 113.
##
## expr -> LBRACK . listelems [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed list expression: expected an expression for a list element.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET CONSTR USE
##
## Ends in an error in state: 100.
##
## pattern -> CONSTR . option(pattern_args) [ RPAREN EQ COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## CONSTR
##

Ill-formed constructor pattern argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET LPAREN UNDERSCORE COMMA USE
##
## Ends in an error in state: 106.
##
## separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Ill-formed pattern argument in tuple pattern.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET LPAREN UNDERSCORE USE
##
## Ends in an error in state: 105.
##
## separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
## separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed pattern argument in tuple pattern: perhaps you forgot a ',' or ')'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET LPAREN USE
##
## Ends in an error in state: 97.
##
## pattern_args -> LPAREN . loption(separated_nonempty_list(COMMA,pattern)) RPAREN [ RPAREN EQ COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed tuple pattern: expected a pattern argument.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ LITERAL IN LITERAL USE
##
## Ends in an error in state: 184.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> LET pattern EQ expr IN expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN expr
##

Ill-formed expression body in let expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ LITERAL IN USE
##
## Ends in an error in state: 183.
##
## expr -> LET pattern EQ expr IN . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr IN
##

Ill-formed expression body in let expression: expected an expression for the body.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ LITERAL USE
##
## Ends in an error in state: 182.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND IN GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> LET pattern EQ expr . IN expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ expr
##

Ill-formed let expression: error in either the rhs of the binding, or there is a missing 'in' following the rhs of the binding.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE EQ USE
##
## Ends in an error in state: 112.
##
## expr -> LET pattern EQ . expr IN expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ
##

Ill-formed rhs of the binding in the let expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET UNDERSCORE USE
##
## Ends in an error in state: 111.
##
## expr -> LET pattern . EQ expr IN expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LET pattern
##

A let binding pattern is followed by '='.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LET USE
##
## Ends in an error in state: 95.
##
## expr -> LET . pattern EQ expr IN expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LET
##

Ill-formed let binding pattern.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL AT LITERAL USE
##
## Ends in an error in state: 156.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr AT expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr AT expr
##

Ill-formed expression for the second argument of the '@' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL AT USE
##
## Ends in an error in state: 155.
##
## expr -> expr AT . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr AT
##

Ill-formed expression for the first argument of the '@' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL COLONCOLON LITERAL USE
##
## Ends in an error in state: 154.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr COLONCOLON expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr COLONCOLON expr
##

Ill-formed expression for the second argument of the '::' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL COLONCOLON USE
##
## Ends in an error in state: 153.
##
## expr -> expr COLONCOLON . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr COLONCOLON
##

Ill-formed expression for the first argument of the '::' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL CONSTR_MATCH USE
##
## Ends in an error in state: 169.
##
## expr -> expr CONSTR_MATCH . CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr CONSTR_MATCH
##

Ill-formed expression for the second argument of the '~~' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL DIV LITERAL USE
##
## Ends in an error in state: 152.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr DIV expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

Ill-formed denominator argument for the '/' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL DIV USE
##
## Ends in an error in state: 151.
##
## expr -> expr DIV . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

Ill-formed denominator argument for the '/' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL DOT USE
##
## Ends in an error in state: 145.
##
## expr -> expr DOT . ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Ill-formed record field or attribute in expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL EQ LITERAL USE
##
## Ends in an error in state: 168.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr EQ expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

Ill-formed expression for the second argument of the '=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL EQ USE
##
## Ends in an error in state: 167.
##
## expr -> expr EQ . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

Ill-formed expression for the second argument of the '=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL GT LITERAL USE
##
## Ends in an error in state: 166.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr GT expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

Ill-formed expression for the second argument of the '>' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL GT USE
##
## Ends in an error in state: 165.
##
## expr -> expr GT . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr GT
##

Ill-formed expression for the second argument of the '>' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL GTEQ LITERAL USE
##
## Ends in an error in state: 164.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr GTEQ expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr GTEQ expr
##

Ill-formed expression for the second argument of the '>=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL GTEQ USE
##
## Ends in an error in state: 163.
##
## expr -> expr GTEQ . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr GTEQ
##

Ill-formed expression for the second argument of the '>=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LAND LITERAL USE
##
## Ends in an error in state: 172.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr LAND expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LAND expr
##

Ill-formed expression for the second argument of the '&&' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LAND USE
##
## Ends in an error in state: 171.
##
## expr -> expr LAND . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LAND
##

Ill-formed expression for the second argument of the '&&' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LBRACK LITERAL USE
##
## Ends in an error in state: 141.
##
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr LBRACK expr . RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
##
## The known suffix of the stack is as follows:
## expr LBRACK expr
##

Ill-formed index expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LBRACK USE
##
## Ends in an error in state: 140.
##
## expr -> expr LBRACK . expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LBRACK
##

Ill-formed index expression: expected an expression after the '['.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LOR LITERAL USE
##
## Ends in an error in state: 162.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr LOR expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LOR expr
##

Ill-formed expression for the second argument of the '||' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LOR USE
##
## Ends in an error in state: 161.
##
## expr -> expr LOR . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LOR
##

Ill-formed expression for the second argument of the '||' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LPAREN LITERAL USE
##
## Ends in an error in state: 132.
##
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

Ill-formed argument in application: did you forget a ',' to separate arguments?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LPAREN USE
##
## Ends in an error in state: 137.
##
## expr -> expr LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LPAREN
##

Ill-formed argument in application.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LT LITERAL USE
##
## Ends in an error in state: 160.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr LT expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

Ill-formed expression for the second argument of the '<' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LT USE
##
## Ends in an error in state: 159.
##
## expr -> expr LT . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LT
##

Ill-formed expression for the second argument of the '<' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LTEQ LITERAL USE
##
## Ends in an error in state: 158.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr LTEQ expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LTEQ expr
##

Ill-formed expression for the second argument of the '<=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL LTEQ USE
##
## Ends in an error in state: 157.
##
## expr -> expr LTEQ . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr LTEQ
##

Ill-formed expression for the second argument of the '<=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL MINUS LITERAL USE
##
## Ends in an error in state: 150.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr MINUS expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

Ill-formed expression for the second argument of the '-' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL MINUS USE
##
## Ends in an error in state: 149.
##
## expr -> expr MINUS . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

Ill-formed expression for the second argument of the '-' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL NEQ LITERAL USE
##
## Ends in an error in state: 148.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr NEQ expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

Ill-formed expression for the second argument of the '!=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL NEQ USE
##
## Ends in an error in state: 147.
##
## expr -> expr NEQ . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

Ill-formed expression for the second argument of the '!=' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL PLUS LITERAL USE
##
## Ends in an error in state: 144.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr PLUS expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

Ill-formed expression for the second argument of the '+' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL PLUS USE
##
## Ends in an error in state: 143.
##
## expr -> expr PLUS . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Ill-formed expression for the second argument of the '+' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL PLUS_S LITERAL USE
##
## Ends in an error in state: 136.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr PLUS_S expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr PLUS_S expr
##

Ill-formed expression for the second argument of the '+_s' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL PLUS_S USE
##
## Ends in an error in state: 135.
##
## expr -> expr PLUS_S . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr PLUS_S
##

Ill-formed expression for the second argument of the '+_s' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL STAR LITERAL USE
##
## Ends in an error in state: 134.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr STAR expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr STAR expr
##

Ill-formed expression for the second argument of the '*' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL STAR USE
##
## Ends in an error in state: 133.
##
## expr -> expr STAR . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## expr STAR
##

Ill-formed expression for the second argument of the '*' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LITERAL USE
##
## Ends in an error in state: 329.
##
## expr -> expr . DOT ident [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACK PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## rule_elem -> LBRACK expr . RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## LBRACK expr
##

Ill-formed constraint expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF BAR USE
##
## Ends in an error in state: 189.
##
## expr -> LPAREN CASE expr OF option(BAR) . loption(separated_nonempty_list(BAR,branch)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF option(BAR)
##

Ill-formed branch pattern in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE ARROW ID BAR USE
##
## Ends in an error in state: 197.
##
## separated_nonempty_list(BAR,branch) -> branch BAR . separated_nonempty_list(BAR,branch) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## branch BAR
##

Ill-formed branch pattern in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE ARROW LITERAL USE
##
## Ends in an error in state: 193.
##
## branch -> pattern ARROW expr . [ RPAREN BAR ]
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON BAR AT ]
##
## The known suffix of the stack is as follows:
## pattern ARROW expr
##

Ill-formed expression for branch body in case expression: perhaps you forgot to terminate it with a '|' or ')'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE ARROW USE
##
## Ends in an error in state: 192.
##
## branch -> pattern ARROW . expr [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Ill-formed expression for branch body in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF UNDERSCORE USE
##
## Ends in an error in state: 191.
##
## branch -> pattern . ARROW expr [ RPAREN BAR ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed branch in case expression: perhaps you forgot a '->' after the branch pattern?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL OF USE
##
## Ends in an error in state: 187.
##
## expr -> LPAREN CASE expr OF . option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr OF
##

Ill-formed pattern in branch of case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE LITERAL USE
##
## Ends in an error in state: 186.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> LPAREN CASE expr . OF option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE expr
##

Ill-formed scrutinee expression in case expression: perhaps you forgot an 'of' after the scrutinee?


toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN CASE USE
##
## Ends in an error in state: 185.
##
## expr -> LPAREN CASE . expr OF option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN CASE
##

Ill-formed scrutinee expression in case expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL COLON TVAR USE
##
## Ends in an error in state: 203.
##
## expr -> LPAREN expr COLON type_expr . RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COLON type_expr
##

Ill-formed type constraint in expression: perhaps you forgot to terminate the constraint with a ')'?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL COLON USE
##
## Ends in an error in state: 202.
##
## expr -> LPAREN expr COLON . type_expr RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COLON
##

Ill-formed type constraint expression: expected a type expression after the ':'.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL COMMA USE
##
## Ends in an error in state: 173.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN LITERAL USE
##
## Ends in an error in state: 201.
##
## expr -> expr . DOT ident [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . LAND expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . LOR expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . PLUS expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . PLUS_S expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . AT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . MINUS expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . STAR expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . DIV expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . LT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . GT expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . LTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . GTEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . EQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . NEQ expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RPAREN PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON AT ]
## expr -> LPAREN expr . COLON type_expr RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

Ill-formed expression: perhaps you forgot to use a ',' separator or a ')' terminator?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK LPAREN USE
##
## Ends in an error in state: 93.
##
## expr -> LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> LPAREN . CASE expr OF option(BAR) loption(separated_nonempty_list(BAR,branch)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> LPAREN . expr COLON type_expr RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed expression: expected an expression after the '('.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK MINUS LITERAL USE
##
## Ends in an error in state: 205.
##
## expr -> expr . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> MINUS expr . [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

Ill-formed expression for the argument of the unary '-' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK MINUS USE
##
## Ends in an error in state: 92.
##
## expr -> MINUS . expr [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Ill-formed expression for the argument of the unary '-' operator.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK UID DOT USE
##
## Ends in an error in state: 90.
##
## expr -> UID DOT . ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## UID DOT
##

Ill-formed field identifer in record field expression.

toplevel: FORMAT LBRACE UID COLONEQ LBRACK UID USE
##
## Ends in an error in state: 89.
##
## expr -> UID . DOT ident [ UID SYN_END SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RPARBAR RBRACK RBRACE QUESTION PLUS_S PLUS OF NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND IN ID HASH GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COMMA COLONCOLON COLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed record field expression: perhaps you forgot a '.' before the field identifier?

toplevel: FORMAT LBRACE UID COLONEQ LBRACK USE
##
## Ends in an error in state: 328.
##
## rule_elem -> LBRACK . expr RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed constraint expression.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON ID COLONEQ ID COMMA USE
##
## Ends in an error in state: 416.
##
## separated_nonempty_list(COMMA,temp_decl) -> temp_decl COMMA . separated_nonempty_list(COMMA,temp_decl) [ RPARBAR ]
##
## The known suffix of the stack is as follows:
## temp_decl COMMA
##

Ill-formed temporary declaration.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON TVAR COLONEQ LITERAL USE
##
## Ends in an error in state: 422.
##
## expr -> expr . DOT ident [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RPARBAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## temp_decl -> ident COLON type_expr COLONEQ expr . [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ expr
##

Ill-formed initializer expression in temporary declaration.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON TVAR COLONEQ USE
##
## Ends in an error in state: 421.
##
## temp_decl -> ident COLON type_expr COLONEQ . expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ
##

Ill-formed initializer expression in temporary declaration: expected an expression after the ':='.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON TVAR USE
##
## Ends in an error in state: 420.
##
## temp_decl -> ident COLON type_expr . COLONEQ expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr
##

Ill-formed temporary declaration: expected an initializer expression.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID COLON USE
##
## Ends in an error in state: 419.
##
## temp_decl -> ident COLON . type_expr COLONEQ expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed temporary declaration: expected a type specifier.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR ID USE
##
## Ends in an error in state: 418.
##
## temp_decl -> ident . COLON type_expr COLONEQ expr [ RPARBAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed temporary declaration: perhaps you forgot a ':' after the temporary identifier?

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR RPARBAR USE
##
## Ends in an error in state: 413.
##
## rule -> LPARBAR temp_decls RPARBAR . list(rule_elem) [ SEMISEMI SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LPARBAR temp_decls RPARBAR
##

Ill-formed rule: expected a rule element, or a ';' or ';;' terminator.

toplevel: FORMAT LBRACE UID COLONEQ LPARBAR USE
##
## Ends in an error in state: 411.
##
## rule -> LPARBAR . temp_decls RPARBAR list(rule_elem) [ SEMISEMI SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LPARBAR
##

Ill-formed temporaries declaration.

toplevel: FORMAT LBRACE UID COLONEQ LPAREN UID RBRACE
##
## Ends in an error in state: 409.
##
## rule_elem -> LPAREN list(rule_elem) . RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## LPAREN list(rule_elem)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 279, spurious reduction of production option(nt_args) -> 
## In state 290, spurious reduction of production rule_elem -> UID option(nt_args) 
## In state 407, spurious reduction of production list(rule_elem) -> 
## In state 408, spurious reduction of production list(rule_elem) -> rule_elem list(rule_elem) 
##

Ill-formed rule element list: perhaps you forgot a ')'?

toplevel: FORMAT LBRACE UID COLONEQ LPAREN USE
##
## Ends in an error in state: 327.
##
## rule_elem -> LPAREN . list(rule_elem) RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ SEMICOLON USE
##
## Ends in an error in state: 427.
##
## separated_nonempty_list(SEMICOLON,rule) -> rule SEMICOLON . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## rule SEMICOLON
##

A rule begins with an ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ SEMISEMI USE
##
## Ends in an error in state: 455.
##
## separated_nonempty_list(SEMISEMI,format_decl) -> format_decl SEMISEMI . separated_nonempty_list(SEMISEMI,format_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## format_decl SEMISEMI
##

Ill-formed non-terminal definition: expected a non-terminal identifier (optionally prefixed with an attribute decoration).

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LBRACK UID USE
##
## Ends in an error in state: 309.
##
## literal_set -> literal_set . BACKSLASH literal_set [ RBRACK BACKSLASH ]
## regexp -> LBRACK literal_set . RBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## LBRACK literal_set
##

Ill-formed literal set: perhaps you forget a '\' separator or a ']' terminator?

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LBRACK USE
##
## Ends in an error in state: 295.
##
## regexp -> LBRACK . literal_set RBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed literal set: expected a literal.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LPAREN UID USE
##
## Ends in an error in state: 312.
##
## list(regexp) -> regexp . list(regexp) [ RPAREN ]
## regexp -> regexp . STAR [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . CARET expr [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . PLUS [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . QUESTION [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . BAR regexp [ UID STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN LPAREN USE
##
## Ends in an error in state: 294.
##
## regexp -> LPAREN . list(regexp) RPAREN [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed regular expression: expected a regular expression after the '('.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID BAR UID USE
##
## Ends in an error in state: 319.
##
## regexp -> regexp . STAR [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . CARET expr [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . PLUS [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . QUESTION [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . BAR regexp [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp BAR regexp . [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp BAR regexp
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID BAR USE
##
## Ends in an error in state: 318.
##
## regexp -> regexp BAR . regexp [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp BAR
##

Ill-formed regular expression: expected a regular expression after the '|'.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID CARET LITERAL USE
##
## Ends in an error in state: 317.
##
## expr -> expr . DOT ident [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . LAND expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . LOR expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . PLUS expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . PLUS_S expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . AT expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . MINUS expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . STAR expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . DIV expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . LT expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . GT expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . LTEQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . GTEQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . EQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . NEQ expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_END STAR RPAREN QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND HASH GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT ]
## regexp -> regexp CARET expr . [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp CARET expr
##

Ill-formed bound expression in regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID CARET USE
##
## Ends in an error in state: 316.
##
## regexp -> regexp CARET . expr [ UID SYN_END STAR RPAREN QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp CARET
##

Ill-formed bound expression in regular expression: expected an expression after the '^'.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN UID USE
##
## Ends in an error in state: 323.
##
## nonempty_list(regexp) -> regexp . [ SYN_END ]
## nonempty_list(regexp) -> regexp . nonempty_list(regexp) [ SYN_END ]
## regexp -> regexp . STAR [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . CARET expr [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . PLUS [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . QUESTION [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
## regexp -> regexp . BAR regexp [ UID SYN_END STAR QUESTION PLUS LPAREN LBRACK HASH CARET BAR ]
##
## The known suffix of the stack is as follows:
## regexp
##

Ill-formed regular expression.

toplevel: FORMAT LBRACE UID COLONEQ SYN_BEGIN USE
##
## Ends in an error in state: 292.
##
## rule_elem -> SYN_BEGIN . nonempty_list(regexp) SYN_END [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## SYN_BEGIN
##

Ill-formed regular expression: expected a regular expression.

toplevel: FORMAT LBRACE UID COLONEQ UID BAR EPSILON USE
##
## Ends in an error in state: 399.
##
## rule_elem -> rule_elem . BAR rule_elem [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem BAR rule_elem . [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . STAR [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . CARET expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . PLUS [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . QUESTION [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## rule_elem BAR rule_elem
##

Ill-formed rule element in rule.

toplevel: FORMAT LBRACE UID COLONEQ UID BAR USE
##
## Ends in an error in state: 398.
##
## rule_elem -> rule_elem BAR . rule_elem [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## rule_elem BAR
##

Ill-formed rule element: expected a rule element after the '|'.

toplevel: FORMAT LBRACE UID COLONEQ UID CARET LITERAL USE
##
## Ends in an error in state: 397.
##
## expr -> expr . DOT ident [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LBRACK expr RBRACK [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LAND expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LOR expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . PLUS_S expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . AT expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . MINUS expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . STAR expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . DIV expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LT expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GT expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . LTEQ expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . GTEQ expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . EQ expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . NEQ expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## expr -> expr . COLONCOLON expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LBRACE LAND ID GTEQ GT EXCLAIM EQ EPSILON DOT DIV CONSTR_MATCH COLONCOLON CARET BAR AT_POS AT_MAP AT_BUF AT ]
## rule_elem -> rule_elem CARET expr . [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## rule_elem CARET expr
##

Ill-formed bound expression for rule element.

toplevel: FORMAT LBRACE UID COLONEQ UID CARET USE
##
## Ends in an error in state: 396.
##
## rule_elem -> rule_elem CARET . expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## rule_elem CARET
##

Ill-formed bound expression: expected an expression after the '^'.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID EQ ID COMMA USE
##
## Ends in an error in state: 283.
##
## separated_nonempty_list(COMMA,nt_attr_val) -> nt_attr_val COMMA . separated_nonempty_list(COMMA,nt_attr_val) [ GT ]
##
## The known suffix of the stack is as follows:
## nt_attr_val COMMA
##

Ill-formed inherited attribute specifier: expected an attribute initializer after the ','.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID EQ LITERAL USE
##
## Ends in an error in state: 287.
##
## expr -> expr . DOT ident [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## nt_attr_val -> ident EQ expr . [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQ expr
##

Ill-formed inherited attribute specifier: ill-formed initializer expression.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID EQ USE
##
## Ends in an error in state: 286.
##
## nt_attr_val -> ident EQ . expr [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed inherited attribute specifier: expected an expression after the '='.

toplevel: FORMAT LBRACE UID COLONEQ UID LT ID USE
##
## Ends in an error in state: 285.
##
## nt_attr_val -> ident . EQ expr [ GT COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed inherited attribute specifier: perhaps you forgot an '=' after the attribute identifier?

toplevel: FORMAT LBRACE UID COLONEQ UID LT USE
##
## Ends in an error in state: 280.
##
## nt_args -> LT . loption(separated_nonempty_list(COMMA,nt_attr_val)) GT [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed inherited attribute specifier: expected an attribute identifier after the '<'.

toplevel: FORMAT LBRACE UID COLONEQ UID RBRACK
##
## Ends in an error in state: 407.
##
## list(rule_elem) -> rule_elem . list(rule_elem) [ SEMISEMI SEMICOLON RPAREN RBRACE ]
## rule_elem -> rule_elem . BAR rule_elem [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . STAR [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . CARET expr [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . PLUS [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
## rule_elem -> rule_elem . QUESTION [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## rule_elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 279, spurious reduction of production option(nt_args) -> 
## In state 290, spurious reduction of production rule_elem -> UID option(nt_args) 
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ UID RPAREN
##
## Ends in an error in state: 426.
##
## separated_nonempty_list(SEMICOLON,rule) -> rule . [ SEMISEMI RBRACE ]
## separated_nonempty_list(SEMICOLON,rule) -> rule . SEMICOLON separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## rule
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 279, spurious reduction of production option(nt_args) -> 
## In state 290, spurious reduction of production rule_elem -> UID option(nt_args) 
## In state 407, spurious reduction of production list(rule_elem) -> 
## In state 408, spurious reduction of production list(rule_elem) -> rule_elem list(rule_elem) 
## In state 429, spurious reduction of production rule -> list(rule_elem) 
##

Ill-formed rule: perhaps you forgot a ';', ';;' or '}' terminator?

toplevel: FORMAT LBRACE UID COLONEQ UID USE
##
## Ends in an error in state: 279.
##
## rule_elem -> UID . option(nt_args) [ UID SYN_BEGIN STAR SEMISEMI SEMICOLON RPAREN RBRACK RBRACE QUESTION PLUS LPAREN LBRACK LBRACE ID EXCLAIM EPSILON CARET BAR AT_POS AT_MAP AT_BUF ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed rule element.

toplevel: FORMAT LBRACE UID COLONEQ USE
##
## Ends in an error in state: 448.
##
## nt_defn -> UID option(ident) COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) COLONEQ
##

Ill-formed rule: expected a rule after the ':='.

toplevel: FORMAT LBRACE UID ID COLONCOLON
##
## Ends in an error in state: 270.
##
## nt_defn -> UID option(ident) . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) . LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) . LPAREN param_decls RPAREN COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) . LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident)
##

Ill-formed non-terminal definition: expected attribute declarations or a ':=' after the non-terminal identifier.

toplevel: FORMAT LBRACE UID LBRACE ID COLON ID COMMA USE
##
## Ends in an error in state: 432.
##
## separated_nonempty_list(COMMA,nt_attr_decl) -> nt_attr_decl COMMA . separated_nonempty_list(COMMA,nt_attr_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nt_attr_decl COMMA
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID LBRACE ID COLON ID COMMA ID USE
##
## Ends in an error in state: 434.
##
## nt_attr_decl -> ident . COLON type_expr [ RBRACE COMMA ]
## nt_attr_decl -> ident . COLON type_expr COLONEQ expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a ':'?

toplevel: FORMAT LBRACE UID LBRACE ID COLON USE
##
## Ends in an error in state: 435.
##
## nt_attr_decl -> ident COLON . type_expr [ RBRACE COMMA ]
## nt_attr_decl -> ident COLON . type_expr COLONEQ expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed type specifier for attribute.

toplevel: FORMAT LBRACE UID LBRACE ID COLON ID RPAREN
##
## Ends in an error in state: 436.
##
## nt_attr_decl -> ident COLON type_expr . [ RBRACE COMMA ]
## nt_attr_decl -> ident COLON type_expr . COLONEQ expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production type_expr -> ident 
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID LBRACE ID COLON TVAR COLONEQ USE
##
## Ends in an error in state: 437.
##
## nt_attr_decl -> ident COLON type_expr COLONEQ . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ
##

Ill-formed initializer for synthesized attribute.

toplevel: FORMAT LBRACE UID LBRACE ID COLON TVAR COLONEQ LITERAL USE
##
## Ends in an error in state: 438.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COMMA COLONCOLON AT ]
## nt_attr_decl -> ident COLON type_expr COLONEQ expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON type_expr COLONEQ expr
##

Ill-formed declaration of synthesized attributes: perhaps you forgot a '}'?

toplevel: FORMAT LBRACE UID LBRACE ID USE
##
## Ends in an error in state: 440.
##
## nt_attr_decl -> ident . COLON type_expr [ RBRACE COMMA ]
## nt_attr_decl -> ident . COLON type_expr COLONEQ expr [ RBRACE COMMA ]
## nt_param_decls -> ident . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed synthesized attribute declaration: perhaps you forgot a ':' or '}'?

toplevel: FORMAT LBRACE UID LBRACE RBRACE COLONEQ USE
##
## Ends in an error in state: 446.
##
## nt_defn -> UID option(ident) LBRACE nt_param_decls RBRACE COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LBRACE nt_param_decls RBRACE COLONEQ
##

Ill-formed rule: expected a rule after the ':='.

toplevel: FORMAT LBRACE UID LBRACE RBRACE USE
##
## Ends in an error in state: 445.
##
## nt_defn -> UID option(ident) LBRACE nt_param_decls RBRACE . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LBRACE nt_param_decls RBRACE
##

Ill-formed non-terminal definition: perhaps you forgot a ':=' after the attribute declarations?

toplevel: FORMAT LBRACE UID LBRACE USE
##
## Ends in an error in state: 443.
##
## nt_defn -> UID option(ident) LBRACE . nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LBRACE
##

Ill-formed non-terminal definition: expected synthesized attribute declarations after the '{'.

toplevel: FORMAT LBRACE UID LPAREN ID COLON ID RBRACE
##
## Ends in an error in state: 208.
##
## separated_nonempty_list(COMMA,param_decl) -> param_decl . [ RPAREN ]
## separated_nonempty_list(COMMA,param_decl) -> param_decl . COMMA separated_nonempty_list(COMMA,param_decl) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production type_expr -> ident 
## In state 213, spurious reduction of production param_decl -> ident COLON type_expr 
##

Ill-formed non-terminal definition: perhaps you forgot a ')' after the inherited attribute declarations?

toplevel: FORMAT LBRACE UID LPAREN RPAREN COLONEQ USE
##
## Ends in an error in state: 441.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN COLONEQ
##

Ill-formed rule: expected a rule after the ':='.

toplevel: FORMAT LBRACE UID LPAREN RPAREN LBRACE RBRACE COLONEQ USE
##
## Ends in an error in state: 278.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ . separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ
##

Ill-formed rule: expected a rule to follow the ':='.

toplevel: FORMAT LBRACE UID LPAREN RPAREN LBRACE RBRACE USE
##
## Ends in an error in state: 277.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE
##

Ill-formed non-terminal definition: perhaps you forgot a ':=' after the attribute declarations?

toplevel: FORMAT LBRACE UID LPAREN RPAREN LBRACE USE
##
## Ends in an error in state: 274.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN LBRACE . nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN LBRACE
##

Ill-formed declaration of synthesized attributes.

toplevel: FORMAT LBRACE UID LPAREN RPAREN USE
##
## Ends in an error in state: 273.
##
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN . COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) LPAREN param_decls RPAREN . LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN param_decls RPAREN
##

Ill-formed non-terminal definition: expected either a declaration of synthesized attributes or a ':='.

toplevel: FORMAT LBRACE UID LPAREN USE
##
## Ends in an error in state: 271.
##
## nt_defn -> UID option(ident) LPAREN . param_decls RPAREN COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID option(ident) LPAREN . param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(ident) LPAREN
##

Ill-formed inherited attribute declaration: expected an attribute identifier after the '('.

toplevel: FORMAT LBRACE UID USE
##
## Ends in an error in state: 269.
##
## nt_defn -> UID . option(ident) COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID . option(ident) LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID . option(ident) LPAREN param_decls RPAREN COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
## nt_defn -> UID . option(ident) LPAREN param_decls RPAREN LBRACE nt_param_decls RBRACE COLONEQ separated_nonempty_list(SEMICOLON,rule) [ SEMISEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed non-terminal definition.

toplevel: FORMAT LBRACE USE
##
## Ends in an error in state: 248.
##
## pre_decl -> FORMAT LBRACE . loption(separated_nonempty_list(SEMISEMI,format_decl)) RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FORMAT LBRACE
##

Ill-formed non-terminal definition.

toplevel: FORMAT USE
##
## Ends in an error in state: 247.
##
## pre_decl -> FORMAT . LBRACE loption(separated_nonempty_list(SEMISEMI,format_decl)) RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FORMAT
##

Ill-formed format grammar section: did you forget a '{'?

toplevel: FUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL USE
##
## Ends in an error in state: 245.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## pre_decl -> FUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body: perhaps you forgot a '}'?

toplevel: FUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE USE
##
## Ends in an error in state: 244.
##
## pre_decl -> FUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed function body: expected an expression after the '{'.

toplevel: FUN ID LPAREN RPAREN ARROW TVAR EQ USE
##
## Ends in an error in state: 243.
##
## pre_decl -> FUN ident LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{' after the '='?

toplevel: FUN ID LPAREN RPAREN ARROW TVAR USE
##
## Ends in an error in state: 242.
##
## pre_decl -> FUN ident LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed function definition: did you forget a '=' after the function signature?

toplevel: FUN ID LPAREN RPAREN ARROW USE
##
## Ends in an error in state: 241.
##
## pre_decl -> FUN ident LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN param_decls RPAREN ARROW
##

Ill-formed function definition: expected a type expression after the '->'.

toplevel: FUN ID LPAREN RPAREN USE
##
## Ends in an error in state: 240.
##
## pre_decl -> FUN ident LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN param_decls RPAREN
##

Ill-formed function definition: expected an '->' after the function parameter declarations.

toplevel: FUN ID LPAREN USE
##
## Ends in an error in state: 238.
##
## pre_decl -> FUN ident LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LPAREN
##

Ill-formed function definition: expected a parameter identifer after the '('.

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL USE
##
## Ends in an error in state: 236.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body.

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE USE
##
## Ends in an error in state: 235.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed expression in function body.

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR EQ USE
##
## Ends in an error in state: 234.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{'?

toplevel: FUN ID LT GT LPAREN RPAREN ARROW TVAR USE
##
## Ends in an error in state: 233.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed return type in function signature: perhaps you forgot an '='?

toplevel: FUN ID LT GT LPAREN RPAREN ARROW USE
##
## Ends in an error in state: 232.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW
##

Ill-formed return type in function signature.

toplevel: FUN ID LT GT LPAREN RPAREN USE
##
## Ends in an error in state: 231.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN
##

Ill-formed function signature: perhaps you forgot an '->'?

toplevel: FUN ID LT GT LPAREN USE
##
## Ends in an error in state: 229.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN
##

Ill-formed parameter declaration in function signature.

toplevel: FUN ID LT GT USE
##
## Ends in an error in state: 228.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT
##

Ill-formed parameter declaration in function signature: perhaps you forgot a '('?

toplevel: FUN ID LT TVAR RPAREN
##
## Ends in an error in state: 227.
##
## pre_decl -> FUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) . GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT loption(separated_nonempty_list(COMMA,TVAR))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production separated_nonempty_list(COMMA,TVAR) -> TVAR 
## In state 22, spurious reduction of production loption(separated_nonempty_list(COMMA,TVAR)) -> separated_nonempty_list(COMMA,TVAR) 
##

Ill-formed type parameter declarations in function signature: perhaps you forgot a '>'?

toplevel: FUN ID LT USE
##
## Ends in an error in state: 226.
##
## pre_decl -> FUN ident LT . loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident LT
##

Ill-formed type parameter in function signature.

toplevel: FUN ID USE
##
## Ends in an error in state: 225.
##
## pre_decl -> FUN ident . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
## pre_decl -> FUN ident . LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN ident
##

Ill-formed function definition: expected a declaration of type parameters or argument parameters.

toplevel: FUN USE
##
## Ends in an error in state: 224.
##
## pre_decl -> FUN . ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
## pre_decl -> FUN . ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## FUN
##

Ill-formed function definition: expected a function identifier.

toplevel: RECFUN ID LPAREN ID COLON ID COMMA USE
##
## Ends in an error in state: 209.
##
## separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA . separated_nonempty_list(COMMA,param_decl) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param_decl COMMA
##

Ill-formed function parameter declaration: expected a parameter identifier.

toplevel: RECFUN ID LPAREN ID COLON USE
##
## Ends in an error in state: 212.
##
## param_decl -> ident COLON . type_expr [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Expected a type expression after the ':'.

toplevel: RECFUN ID LPAREN ID USE
##
## Ends in an error in state: 211.
##
## param_decl -> ident . COLON type_expr [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Expected a ':' after the identifier.

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL USE
##
## Ends in an error in state: 222.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## pre_decl -> RECFUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body.

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR EQ LBRACE USE
##
## Ends in an error in state: 221.
##
## pre_decl -> RECFUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed expression for function body: expected an expression after the '{'.

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR EQ USE
##
## Ends in an error in state: 220.
##
## pre_decl -> RECFUN ident LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{' after the '='?

toplevel: RECFUN ID LPAREN RPAREN ARROW TVAR USE
##
## Ends in an error in state: 219.
##
## pre_decl -> RECFUN ident LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed function definition: did you forget a '=' after the function signature?

toplevel: RECFUN ID LPAREN RPAREN ARROW USE
##
## Ends in an error in state: 218.
##
## pre_decl -> RECFUN ident LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN param_decls RPAREN ARROW
##

Ill-formed function definition: expected a type expression after the '->'.

toplevel: RECFUN ID LPAREN RPAREN USE
##
## Ends in an error in state: 217.
##
## pre_decl -> RECFUN ident LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN param_decls RPAREN
##

Ill-formed function definition: expected an '->' after the function parameter declarations.

toplevel: RECFUN ID LPAREN USE
##
## Ends in an error in state: 215.
##
## pre_decl -> RECFUN ident LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LPAREN
##

Ill-formed function definition: expected a parameter identifer after the '('.

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE LITERAL USE
##
## Ends in an error in state: 206.
##
## expr -> expr . DOT ident [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LBRACK expr RBRACK [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LAND expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LOR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . CONSTR_MATCH CONSTR [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . PLUS_S expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . AT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . MINUS expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . STAR expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . DIV expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GT expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . LTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . GTEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . EQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . NEQ expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS_S PLUS NEQ MINUS LTEQ LT LPAREN LOR LBRACK LAND GTEQ GT EQ DOT DIV CONSTR_MATCH COLONCOLON AT ]
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr . RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr
##

Ill-formed expression in function body.

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR EQ LBRACE USE
##
## Ends in an error in state: 88.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE . expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE
##

Ill-formed expression in function body.

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR EQ USE
##
## Ends in an error in state: 87.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ . LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ
##

Ill-formed function definition: did you forget a '{'?

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW TVAR USE
##
## Ends in an error in state: 86.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr . EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr
##

Ill-formed return type in function signature: perhaps you forgot an '='?

toplevel: RECFUN ID LT GT LPAREN RPAREN ARROW USE
##
## Ends in an error in state: 85.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW . type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW
##

Ill-formed return type in function signature.

toplevel: RECFUN ID LT GT LPAREN RPAREN USE
##
## Ends in an error in state: 84.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN . ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN
##

Ill-formed function signature: perhaps you forgot an '->'?

toplevel: RECFUN ID LT GT LPAREN USE
##
## Ends in an error in state: 81.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN . param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN
##

Ill-formed parameter declaration in function signature.

toplevel: RECFUN ID LT GT USE
##
## Ends in an error in state: 80.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT
##

Ill-formed parameter declaration in function signature: perhaps you forgot a '('?

toplevel: RECFUN ID LT TVAR RPAREN
##
## Ends in an error in state: 79.
##
## pre_decl -> RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR)) . GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT loption(separated_nonempty_list(COMMA,TVAR))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production separated_nonempty_list(COMMA,TVAR) -> TVAR 
## In state 22, spurious reduction of production loption(separated_nonempty_list(COMMA,TVAR)) -> separated_nonempty_list(COMMA,TVAR) 
##

Ill-formed type parameter declarations in function signature: perhaps you forgot a '>'?

toplevel: RECFUN ID LT USE
##
## Ends in an error in state: 78.
##
## pre_decl -> RECFUN ident LT . loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident LT
##

Ill-formed type parameter in function signature.

toplevel: RECFUN ID USE
##
## Ends in an error in state: 77.
##
## pre_decl -> RECFUN ident . LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
## pre_decl -> RECFUN ident . LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN ident
##

Ill-formed function definition: expected a declaration of type parameters or argument parameters.

toplevel: RECFUN USE
##
## Ends in an error in state: 76.
##
## pre_decl -> RECFUN . ident LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
## pre_decl -> RECFUN . ident LT loption(separated_nonempty_list(COMMA,TVAR)) GT LPAREN param_decls RPAREN ARROW type_expr EQ LBRACE expr RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## RECFUN
##

Ill-formed function definition: expected a function identifier.

toplevel: TYPE ID EQ BAR UID BAR USE
##
## Ends in an error in state: 63.
##
## separated_nonempty_list(BAR,variant) -> variant BAR . separated_nonempty_list(BAR,variant) [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## variant BAR
##

Ill-formed data constructor in type definition.

toplevel: TYPE ID EQ BAR UID OF TVAR STAR USE
##
## Ends in an error in state: 58.
##
## separated_nonempty_list(STAR,type_expr) -> type_expr STAR . separated_nonempty_list(STAR,type_expr) [ USE TYPE RECFUN FUN FORMAT EOF BAR AND ]
##
## The known suffix of the stack is as follows:
## type_expr STAR
##

Ill-formed type expression: expected a type expression after the '*'.

toplevel: TYPE ID EQ BAR UID OF TVAR UNDERSCORE
##
## Ends in an error in state: 57.
##
## separated_nonempty_list(STAR,type_expr) -> type_expr . [ USE TYPE RECFUN FUN FORMAT EOF BAR AND ]
## separated_nonempty_list(STAR,type_expr) -> type_expr . STAR separated_nonempty_list(STAR,type_expr) [ USE TYPE RECFUN FUN FORMAT EOF BAR AND ]
##
## The known suffix of the stack is as follows:
## type_expr
##

Ill-formed type expression.

toplevel: TYPE ID EQ BAR UID OF UNDERSCORE
##
## Ends in an error in state: 56.
##
## variant -> UID OF . loption(separated_nonempty_list(STAR,type_expr)) [ USE TYPE RECFUN FUN FORMAT EOF BAR AND ]
##
## The known suffix of the stack is as follows:
## UID OF
##

Ill-formed type expression: expected a type expression after 'of'.

toplevel: TYPE ID EQ BAR UID UNDERSCORE
##
## Ends in an error in state: 55.
##
## variant -> UID . [ USE TYPE RECFUN FUN FORMAT EOF BAR AND ]
## variant -> UID . OF loption(separated_nonempty_list(STAR,type_expr)) [ USE TYPE RECFUN FUN FORMAT EOF BAR AND ]
##
## The known suffix of the stack is as follows:
## UID
##

Ill-formed type expression.

toplevel: TYPE ID EQ BAR USE
##
## Ends in an error in state: 54.
##
## variants -> BAR . separated_nonempty_list(BAR,variant) [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## BAR
##

Ill-formed type declaration: expected a data constructor after the '|'.

toplevel: TYPE ID EQ ID AND ID EQ ID AND USE
##
## Ends in an error in state: 15.
##
## separated_nonempty_list(AND,type_decl) -> type_decl AND . separated_nonempty_list(AND,type_decl) [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## type_decl AND
##

Ill-formed type declaration: expected a type identifier after 'and'.

toplevel: TYPE ID EQ ID AND ID EQ TVAR UNDERSCORE
##
## Ends in an error in state: 14.
##
## separated_nonempty_list(AND,type_decl) -> type_decl . [ USE TYPE RECFUN FUN FORMAT EOF ]
## separated_nonempty_list(AND,type_decl) -> type_decl . AND separated_nonempty_list(AND,type_decl) [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## type_decl
##

Ill-formed declaration.

toplevel: TYPE ID EQ ID AND UNDERSCORE
##
## Ends in an error in state: 13.
##
## type_decls -> TYPE type_decl AND . loption(separated_nonempty_list(AND,type_decl)) [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## TYPE type_decl AND
##

Ill-formed type declaration: expected a type identifier after 'and'.

toplevel: TYPE ID EQ ID UNDERSCORE
##
## Ends in an error in state: 32.
##
## def -> ident . [ LT ]
## type_expr -> ident . [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed type expression.

toplevel: TYPE ID EQ LBRACE ID COLON ID COMMA USE
##
## Ends in an error in state: 48.
##
## separated_nonempty_list(COMMA,rec_typ_field) -> rec_typ_field COMMA . separated_nonempty_list(COMMA,rec_typ_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rec_typ_field COMMA
##

Ill-formed field declaration in record type: expected a field identifier.

toplevel: TYPE ID EQ LBRACE ID COLON ID USE
##
## Ends in an error in state: 47.
##
## separated_nonempty_list(COMMA,rec_typ_field) -> rec_typ_field . [ RBRACE ]
## separated_nonempty_list(COMMA,rec_typ_field) -> rec_typ_field . COMMA separated_nonempty_list(COMMA,rec_typ_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## rec_typ_field
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production type_expr -> ident 
## In state 52, spurious reduction of production rec_typ_field -> ident COLON type_expr 
##

Ill-formed record type declaration: did you forget a ',' separator or a '}' terminator?

toplevel: TYPE ID EQ LBRACE ID COLON USE
##
## Ends in an error in state: 51.
##
## rec_typ_field -> ident COLON . type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

Ill-formed field declaration in record type: expected a type expression after the ':'.

toplevel: TYPE ID EQ LBRACE ID USE
##
## Ends in an error in state: 50.
##
## rec_typ_field -> ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed field declaration in record type: expected a ':' after the field identifier.

toplevel: TYPE ID EQ LBRACE USE
##
## Ends in an error in state: 69.
##
## type_decl -> ident EQ LBRACE . rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident EQ LBRACE
##

Ill-formed record type declaration: expected a field identifier after the '{'.

toplevel: TYPE ID EQ LBRACK TVAR USE
##
## Ends in an error in state: 30.
##
## type_expr -> LBRACK type_expr . RBRACK [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## LBRACK type_expr
##

Ill-formed list type: did you forget a ']'?

toplevel: TYPE ID EQ LBRACK USE
##
## Ends in an error in state: 29.
##
## type_expr -> LBRACK . type_expr RBRACK [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed list type: expected a type expression after the '['.

toplevel: TYPE ID EQ LPAREN TVAR COMMA USE
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,type_expr) -> type_expr COMMA . separated_nonempty_list(COMMA,type_expr) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

Ill-formed type expression: expected a type expression after the ','.

toplevel: TYPE ID EQ LPAREN TVAR GT
##
## Ends in an error in state: 41.
##
## type_expr -> LPAREN loption(separated_nonempty_list(COMMA,type_expr)) . RPAREN [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,type_expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production separated_nonempty_list(COMMA,type_expr) -> type_expr 
## In state 38, spurious reduction of production loption(separated_nonempty_list(COMMA,type_expr)) -> separated_nonempty_list(COMMA,type_expr) 
##

Ill-formed tuple type expression: did you forget a ')'?

toplevel: TYPE ID EQ LPAREN TVAR USE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,type_expr) -> type_expr . [ RPAREN GT ]
## separated_nonempty_list(COMMA,type_expr) -> type_expr . COMMA separated_nonempty_list(COMMA,type_expr) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## type_expr
##

Ill-formed type expression: expected a ',' or a terminating ')' or '>'.

toplevel: TYPE ID EQ LPAREN USE
##
## Ends in an error in state: 28.
##
## type_expr -> LPAREN . loption(separated_nonempty_list(COMMA,type_expr)) RPAREN [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed type expression: expected a type expression after the '('.

toplevel: TYPE ID EQ TVAR UNDERSCORE
##
## Ends in an error in state: 12.
##
## type_decls -> TYPE type_decl . [ USE TYPE RECFUN FUN FORMAT EOF ]
## type_decls -> TYPE type_decl . AND loption(separated_nonempty_list(AND,type_decl)) [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## TYPE type_decl
##

Ill-formed declaration.

toplevel: TYPE ID EQ UID LT TVAR RPAREN
##
## Ends in an error in state: 39.
##
## type_expr -> def LT loption(separated_nonempty_list(COMMA,type_expr)) . GT [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## def LT loption(separated_nonempty_list(COMMA,type_expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production separated_nonempty_list(COMMA,type_expr) -> type_expr 
## In state 38, spurious reduction of production loption(separated_nonempty_list(COMMA,type_expr)) -> separated_nonempty_list(COMMA,type_expr) 
##

Ill-formed type expression: did you forget a '>'?

toplevel: TYPE ID EQ UID LT USE
##
## Ends in an error in state: 34.
##
## type_expr -> def LT . loption(separated_nonempty_list(COMMA,type_expr)) GT [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## def LT
##

Ill-formed type parameter: expected a type parameter after the '<'.

toplevel: TYPE ID EQ UID USE
##
## Ends in an error in state: 33.
##
## type_expr -> def . LT loption(separated_nonempty_list(COMMA,type_expr)) GT [ USE TYPE STAR RPAREN RECFUN RBRACK RBRACE GT FUN FORMAT EQ EOF COMMA COLONEQ BAR AND ]
##
## The known suffix of the stack is as follows:
## def
##

Ill-formed type expression: did you forget a '<'?

toplevel: TYPE ID EQ USE
##
## Ends in an error in state: 68.
##
## type_decl -> ident EQ . type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident EQ . variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident EQ . LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident EQ
##

Ill-formed type declaration: expected a type expression after the '='.

toplevel: TYPE ID LPAREN RPAREN EQ LBRACE USE
##
## Ends in an error in state: 43.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE . rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE
##

Ill-formed record field in type declaration: expected a field identifier after the '{'.

toplevel: TYPE ID LPAREN RPAREN EQ USE
##
## Ends in an error in state: 25.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ . type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ . variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ . LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ
##

Ill-formed type declaration: expected a variant type, record type or type expression after the '='.

toplevel: TYPE ID LPAREN RPAREN USE
##
## Ends in an error in state: 24.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN . EQ type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN . EQ variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN . EQ LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN
##

Ill-formed type declaration: did you forget a '=' after the ')'?

toplevel: TYPE ID LPAREN TVAR COMMA USE
##
## Ends in an error in state: 20.
##
## separated_nonempty_list(COMMA,TVAR) -> TVAR COMMA . separated_nonempty_list(COMMA,TVAR) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## TVAR COMMA
##

Ill-formed type variable list: expected a type variable after the ','.

toplevel: TYPE ID LPAREN TVAR GT
##
## Ends in an error in state: 23.
##
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) . RPAREN EQ type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) . RPAREN EQ variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN loption(separated_nonempty_list(COMMA,TVAR)) . RPAREN EQ LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN loption(separated_nonempty_list(COMMA,TVAR))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production separated_nonempty_list(COMMA,TVAR) -> TVAR 
## In state 22, spurious reduction of production loption(separated_nonempty_list(COMMA,TVAR)) -> separated_nonempty_list(COMMA,TVAR) 
##

Ill-formed type variable list in type declaration: did you forget a ')'?

toplevel: TYPE ID LPAREN TVAR USE
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(COMMA,TVAR) -> TVAR . [ RPAREN GT ]
## separated_nonempty_list(COMMA,TVAR) -> TVAR . COMMA separated_nonempty_list(COMMA,TVAR) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## TVAR
##

Ill-formed type variable list: did you forget a ',', ')' or '>'?

toplevel: TYPE ID LPAREN USE
##
## Ends in an error in state: 18.
##
## type_decl -> ident LPAREN . loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN . loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident LPAREN . loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN
##

Ill-formed type variable in type declaration: expected a type variable after the '('.

toplevel: TYPE ID USE
##
## Ends in an error in state: 17.
##
## type_decl -> ident . EQ type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident . LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ type_expr [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident . EQ variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident . LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ variants [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident . EQ LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
## type_decl -> ident . LPAREN loption(separated_nonempty_list(COMMA,TVAR)) RPAREN EQ LBRACE rec_typ_fields RBRACE [ USE TYPE RECFUN FUN FORMAT EOF AND ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed type declaration: expected a type variable list or '='.

toplevel: TYPE USE
##
## Ends in an error in state: 11.
##
## type_decls -> TYPE . type_decl [ USE TYPE RECFUN FUN FORMAT EOF ]
## type_decls -> TYPE . type_decl AND loption(separated_nonempty_list(AND,type_decl)) [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Ill-formed type declaration: expected a type identifier.

toplevel: UNDERSCORE
##
## Ends in an error in state: 0.
##
## toplevel' -> . toplevel [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed declaration.

toplevel: USE ID UNDERSCORE
##
## Ends in an error in state: 460.
##
## list(pre_decl) -> pre_decl . list(pre_decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## pre_decl
##

Ill-formed declaration.

toplevel: USE LBRACE ID COMMA USE
##
## Ends in an error in state: 8.
##
## separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ident COMMA
##

Ill-formed use declaration: expected an identifer after the ','.

toplevel: USE LBRACE ID USE
##
## Ends in an error in state: 7.
##
## separated_nonempty_list(COMMA,ident) -> ident . [ RBRACE ]
## separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ident
##

Ill-formed use declaration: did you forget a ',' separator or a '}' terminator?

toplevel: USE LBRACE USE
##
## Ends in an error in state: 2.
##
## pre_decl -> USE LBRACE . loption(separated_nonempty_list(COMMA,ident)) RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## USE LBRACE
##

Ill-formed use declaration: expected a Parsley module identifier, i.e. the basename of module filename.

toplevel: USE USE
##
## Ends in an error in state: 1.
##
## pre_decl -> USE . ident [ USE TYPE RECFUN FUN FORMAT EOF ]
## pre_decl -> USE . LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE [ USE TYPE RECFUN FUN FORMAT EOF ]
##
## The known suffix of the stack is as follows:
## USE
##

Ill-formed use declaration: expected a Parsley module identifier or an opening '{'.
