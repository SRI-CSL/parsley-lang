Bitvectors
==========

Bitvectors require a new type constructor that takes natural numbers
as arguments to indicate their width/length.  Integrating these
numbers into the type system requires a new kind, KNat, so that the
kind signature of 'bitvector' is:

  bitvector :: KNat -> KStar

Ideally, the constraint variables used within the HMX implementation
would be annotated with type kind information.  This kind annotation
would be taken into account:

. during unification to ensure that a tvar of kind KStar cannot be
  unified with one of kind KNat.

. for univeral and existential quantification of constraint variables

. during instantiation of quantified variables to generate the
  appropriately kinded variables

However, adding and using this annotation is quite an invasive change
to the HMX engine.  Instead, we will attempt the following strategy.

. We will add (KStar | KNat) kind information to constraint variables
  generated from leaf TVariables.  This will be done by treating the
  bitvector type constructor as a special case; i.e. the default will
  be the KStar kind.

. The concrete syntax will require constant-foldable natural numbers
  as width arguments to bitvector.  For standard library bitvector
  functions that need to be polymorphic over bitvector widths, we will
  instantiate these widths with appropriately kinded variables, again
  using a special case.

. During the first pass of type-checking, we will register all known
  concrete widths as Constant constraint variables with KNat type
  kind, just as is done for basic and defined types.

. During constraint solving, we will check type kinding when unifying
  constraint variables.  Q: does this really matter? see below.

Q: Can we propagate the type kind when copying/instantiating
   variables?  No: 'exists*' and similar constructs generate variables
   in a generic way, with no kind information at hand.  We could add
   special cases to the callers of 'exists*' to call appropriate
   versions of 'exists*', but this is fragile.

The approach we have taken will not allow constructs like
zeros(sizeof(bv) * 2), since this type-level arithmetic cannot be done
during purely syntactic constraint solving.  This disallows common
operations such as bitvector concatenation!

We cannot allow sizeof(bv) either, since that provides direct access
to the N of bitvector<N>, and hence we cannot prevent:

  let bv = 0b0000 in         // bv: bitvector<4>
  let n  = sizeof(bv) in     // n:  4
  let l = [ n ] in           // l: list<4>

We could support simpler constructs such as zeros(N), ones(N).

    N should be a constant, N > 0
    -------------------------------
    zeros(N)/ones(N):  bitvector<N>

We could allow zeros_of(v), ones_of(v).

    v: bitvector<N>, N > 0
    ------------------------------------
    zeros_of(v)/ones_of(v): bitvector<N>

Bitvectors of width 0 are currently forbidden.

Bitvector ranges
================

We need to support range selection such as v{N:M}, at least for
constant N, M.  Checking for this will have to be done in a
postprocessing pass, once the type of v is solved.  So, we typecheck
this as follows:

  RC
  v: bitvector<n>
  N, M: constant numbers
  N >= M >= 0
  ----------------------
  v{N:M}: bitvector<N-M+1>
  RC + (n >= N)

  where RC is a collection of range constraints that we need to solve
  after type-checking.

Bitfields
=========

bitfield r = {
  bits:   3:1,
  flag:   0,
}

flag: r -> bitvector<1>
bits: r -> bitvector<3>

 . bit ranges should not overlap
 . bit ranges should be a cover of [0, n] when n is the max index.

 . conversions
   . these need to have the bitfield name encoded so that the typing is
     unambiguous

   . record -> bitvector: r->bits(x)
     |= r :: bitfield<n>
     |= x : r
     ----------------------------
     |= r->bits(x) : bitvector<n>

   . bitvector -> record: r->record(v)
     |= r :: bitfield<n>
     |= v : bitvector<n>
     -------------------
     |= r->record(v) : r

Use in Grammars
===============

The bit-level invariant that is maintained by design is that each rule
for a non-terminal begins and ends on a byte-aligned boundary.  This
implies that within a rule, each call to a non-terminal should begin
and end on a byte boundary.

During static alignment checks, a symbolic cursor tracking the current
bit-position is maintained while traversing the elements of a rule.
Alignment checks are implemented by checking the value [c] of this
cursor satisfies (c mod 8) == 0.

Alignment checks are performed at the beginning and end of every
non-sequence combinator.  In addition, it will be performed at
selected positions within a sequence combinator, as specified below.

Alignments that match 0 bits are forbidden.

To support alignment, we will support two alignment primitives:

. [s] $align(n) [e]

  If this primitive is encountered at symbolic cursor bit-position
  [s], then it matches the least number of bits to end up at
  bit-position [e], where (e mod n) = 0.

  [s] is not checked for alignment. [e] will by definition have the
  specified alignment. [e] can be computed as

  e = s + (n - (s mod n))

. [s] $pad(n, bv) [e]

  This is a version of $align(n) where the padding bytes can be
  checked to repeat the bit pattern specified by bv.


. [s] BitVector<n> [e = s + n]

  BitVector matching primitives are present in the standard library as
  BitVector<n>.  This is the *only* non-terminal that is
  non-byte-aligned.

  [s] and [e] are not checked for alignment.

. [s] 0b(1|0)+ [e = s + length(bit-literal 0b...)]

  Bitvector literals can also be non-byte-aligned.

  i.e. [s] and [e] are not checked for alignment.

. User-defined bitfields can be used in a rule as

  [s] $bitfield(bf) [e = s + bit-length(bf)]

  where bf is the name of the user-defined bitfield.  When bound, the
  binding has the bitfield record type.  This is the only other
  construct (other than BitVector) that can match and bind unaligned
  bits.

  [s] and [e] are not checked for alignment.

. [s] NT [e = 0]

  If NT is any non-terminal (other than BitVector), regular
  expression, or non-bitvector literal then [s] is checked for
  alignment.

  [e] will be at an byte-aligned position, and can be taken to have a
  symbolic bit-position of 0.

. The grammar operands of any combinator C other than the sequence
  combinator have to begin and end on a byte boundary.

  [s] C (<arg seq>) [e = 0]

  [s] is checked for alignment.

  The sequence <arg seq> will be checked for alignment with a starting
  symbolic bit-position of 0.  The ending bit-position after <arg seq>
  is checked for alignment.

  [e] will be at an byte-aligned position, and can be taken to have a
  symbolic bit-position of 0.

  In particular, this means that the following constructions will
  generate errors:

  BitVector<n> [*|+|?]           where n mod 8 != 0.

  [align<n> | pad<n,_>] [*|+|?]  where n mod 8 != 0.

. Constraints and actions can be evaluated at non-byte-aligned
  positions.

  [Issue: cursor positions can be evaluated in the expressions within
   these constraints and actions.  Should we have a different API to
   get bit-level cursor positions?  This would allow us to prevent
   setting window views at non-byte-aligned cursor positions.  It does
   not seem practically useful to allow this.]
