// This Parsley file is based on the IP Version 4 specification: https://tools.ietf.org/html/rfc791

use udp

type ip_packet = {
  version: int,
  ihl: int,
  type_of_service: int,
  total_length: int,
  identification: [byte],
  flags: int,
  fragment_offset: int,
  time_to_live: int,
  protocol: int,
  header_checksum: int,
  source_address: [byte],
  destination_address: [byte],
  options_and_padding: [byte]
}

format {
  IPPacket ipp {ip_packet} :=
    (| version: int := 0, ihl: int := 0, flags: int := 0, fragment_offset: int := 0, expr1: int := 0, expr2: int := 0 |)
    version_and_ihl = UInt8<endian=endian::Big()>
    {
      version := version_and_ihl / 16;
      ihl := (version_and_ihl * 16) / 16
    }
    [version = 4]
    [ihl >= 5]  // the header length should be at least 5 as per the spec
    type_of_service = UInt8<endian=endian::Big()>
    total_length = UInt16<endian=endian::Big()>
    identification = (Byte^2)
    flags_and_fragment_offset = UInt16<endian=endian::Big()>
    {
      flags := flags_and_fragment_offset / 1024;
      fragment_offset := (flags_and_fragment_offset * 8) / 8
    }
    time_to_live = UInt8<endian=endian::Big()>
    protocol = UInt8<endian=endian::Big()>
    header_checksum = UInt16<endian=endian::Big()>
    source_address = (Byte^4)
    destination_address = (Byte^4)
    options_and_padding_len = {      
      expr1 := 4 * ihl;
      expr2 := expr1 - 5
      ;;
      expr2
    }
    options_and_padding = (Byte^options_and_padding_len)
    {
      ipp.version := version;
      ipp.ihl := ihl;
      ipp.type_of_service := type_of_service;
      ipp.total_length := total_length;
      ipp.identification := identification;
      ipp.flags := flags;
      ipp.fragment_offset := fragment_offset;
      ipp.time_to_live := time_to_live;
      ipp.protocol := protocol; 
      ipp.header_checksum := header_checksum;
      ipp.source_address := source_address;
      ipp.destination_address := destination_address;
      ipp.options_and_padding := options_and_padding
    }
    [protocol = 17 && flags = 2] UDPPacket | // udp w/o fragmentation 
    [protocol != 17 || flags != 2] () // placeholder for udp w/o fragmentation or other next level protocols, e.g., protocol 6 is tcp
}

