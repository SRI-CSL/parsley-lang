// this resource signature currently only models the stack
type resource =
{ consume: int,
  produce: int }

type operation =
 | If of resource * [operation]
 | If_else of resource * [operation] * [operation]
 // ... other ops

recfun num_ops (o: operation) -> int = {
  (case o of
   | operation::If(_, s) ->
       1 + num_stream_ops(s, 0)
   | operation::If_else(_, s, t) ->
       2 + num_stream_ops(s, 0) + num_stream_ops(t, 0)
   // other ops
   )
}

and num_stream_ops (os: [operation], acc: int) -> int = {
  (case os of
   | [] -> acc
   | hd :: tl -> num_ops(hd) + num_stream_ops(tl, acc)
  )
}

format {
  U32 := UInt32<endian=endian::Big()> ;;

  Operation o {op: operation} :=
      !"if  "! t=U32
      !"else"! u=U32
      tv = {;; let v = View.get_current() in
               View.restrict(v, 0, 8*t) }
      uv = {;; let v = View.get_current() in
               let v = View.restrict_from(v, 8*t) in
               View.restrict(v, 0, 8*u) }
      ifops  = @[tv, OpStream<nops = t>]
      elsops = @[uv, OpStream<nops = u>]
      { let r = { consume: 1,
                  produce: 0 } in
        o.op := operation::If_else(r, ifops, elsops) }
   ;
      !"if  "! t=U32
      tv = {;; let v = View.get_current() in
               View.restrict(v, 0, 8*t) }
      ifops  = @[tv, OpStream<nops = t>]
      { let r = { consume: 1,
                  produce: 0 } in
        o.op := operation::If(r, ifops) }

   // ... other ops

   ;;

  OpStream os (nops: int) {ops: [operation]} :=
      (| l : [operation] := [], cnt : int := 0 |)

      ( [cnt < nops]
        o=Operation
        { l := o.op :: l;
          cnt := cnt + num_ops(o.op) }
      ) *
      [ cnt = nops ]

      { os.ops := List.rev(l) }
}
