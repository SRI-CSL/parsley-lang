fun more_than_five(b : [byte]) -> bool = {
  (case I64.of_bytes(b) of
   | option::Some(i) -> i >_i64 5_i64
   | option::None()  -> bool::False())
}

format {

  // Match a byte.
  A := (# ["A"] #);;

  // Match a range of bytes.
  R := (# ["0" .. "9"] #);;

  // Binary integers using builtins.  Bytes don't need endianness.
  I8    := Int8;;
  U64LE := UInt64<endian=endian::Little()>;;

  // Match a set of bytes: need to enumerate the set.
  Set := (# [ "0" | "5" | "9" ] #);;

  // Pure parser
  Pure p { val: [byte] } := { p.val := "A" };;
  // with optional initializer
  Pure2 p { val2: [byte] := [] } := { p.val2 := "A" };;

  // Sequencing and Selection
  ABC1 p {a: [byte]} := !"Helo"! v=!"ABC"! {p.a := v};;
  ABC2 p {b: [byte]} := a=!"Helo"! b=!"ABC"! {p.b := List.concat(a, b)};;

  // Select p {p: typ} := P q=Q R {p.p := q};;

  // Local variables
  Add a {sum: u16} := x=Byte !"+"! y=Byte
    {a.sum := U16.of_byte(x) +_u16 U16.of_byte(y)};;

  // Structuring
  Struct s {x: u8, y: [byte]} := x=Byte y=!"Hello"!
    {s.x := U8.of_byte(x); s.y := y};;

  // Constraints
  C p {c: [byte]} :=
      i=(# [ "0" .. "9" ] #)
      (([more_than_five(i)] { p.c := "gt 5" })
        | { p.c := "leq 5 or not int" }
      );;

  // Scanning for a tag: forwards
  SF s {sf: [byte]} :=
     bs=/sf["tag"] { s.sf := bs };;

  // Scanning for a tag: backwards
  SB s {sb: [byte]} :=
     bs=/sb["tag"] { s.sb := bs };;

  // Example of a common dependent type:
  // 'c' captures a byte that represents the length of a vector of
  // bytes, captured by 'v'.  The conversion of 'c' into the integer length
  // value is done by the library function Int.of_byte().
  DepVec dv { vec: [byte] } :=
    c=Byte v=(Byte ^ Usize.of_byte(c))
    { dv.vec := v }
}

// This data-dependent vector count also applies for non-terminals.
type recd = { t : byte }
fun byte_of_recd (r : recd) -> byte = { r.t }

format {

  NonTerm nt { recd } :=
    c=Byte
    { nt.t := c } ;;

  DepNTVec dv { depvec: [byte] } :=
    c=Byte v=(NonTerm ^ Usize.of_byte(c))
    { dv.depvec := List.map(byte_of_recd, v) } ;;

  // The dependent count can be an attribute of a previously parsed
  // non-terminal.

  NTDepNTVec dv { depntvec: [byte] } :=
    c=NonTerm v=(NonTerm ^ Usize.of_byte(c.t))
    { dv.depntvec := List.map(byte_of_recd, v) }

}
