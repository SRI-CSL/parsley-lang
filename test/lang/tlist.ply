type my_list('a) =
 | Null
 | Cons of 'a * my_list<'a>

fun cons <'a> (l: my_list<'a>, e: 'a) -> my_list<'a> = {
  (case l of
  | my_list::Null()     -> my_list::Cons(e, my_list::Null())
  | my_list::Cons(_, _) -> my_list::Cons(e, l)
  )
}

recfun my_len <'a> (l: my_list<'a>) -> usize = {
  (case l of
  | my_list::Null()     -> 0u
  | my_list::Cons(_, t) -> 1u +_u my_len(t)
  )
}

recfun len <'a> (l: ['a]) -> usize = {
  (case l of
  | []     -> 0u
  | _ :: t -> 1u +_u len(t)
  )
}

type shape =
 | Square
 | Circle
 | Rectangle

recfun all_square (l: [shape]) -> bool = {
  (case l of
   | []       -> bool::True()
   | hd :: tl ->
      (case hd of
       | shape::Square() -> all_square (tl)
       | _               -> bool::False()))
}

fun is_square (s: shape) -> bool = {
 (case s of
  | shape::Square() -> bool::True()
  | _               -> bool::False())
}

fun do_map (l: [shape]) -> [bool] = {
  List.map(is_square, l)
}

//fun do_map_case (l: [shape]) -> [bool] = {
//  let (i, j) = (List.map, List.map) in   // illegal let
//  (case (List.map, List.map) of          // illegal pattern
//  | (i, _) -> i(is_square, l)
//  )
//}
