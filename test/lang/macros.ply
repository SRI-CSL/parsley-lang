type t =
 | A
 | B
fun couple (l: t, r: t) -> u32 = {
  (case (l, r) of
  | (t::A(), t::A()) -> 0u32
  | (t::A(), t::B()) -> 1u32
  | (t::B(), t::A()) -> 2u32
  | (t::B(), t::B()) -> 3u32
  )
}
format {
  A a {i: [u32]} := { let l = [t::A(); t::B(); t::A(); t::B()] in
                      let r = [t::A(); t::A(); t::B(); t::B()] in
		      a.i := List.map2(couple, l, r) }
}

fun accum (acc: u32, b: byte) -> u32 = {
  acc +_u32 U32.of_byte(b)
    acc + Int.of_byte(b)
}

fun do_fold(bl: [byte]) -> u32 = {
  List.fold(accum, 0u32, bl)
}
