type pdfobj = int
type obj_ctxt = map<(int, int), pdfobj>
type obj_set = set<pdfobj>

type tree ('a) =
 | Node of tree<'a> * 'a * tree<'a>
 | Leaf of 'a

type point ('a, 'b) = {
  xcoord : 'a,
  ycoord : 'b
}

fun max (a: i32, b: i32) -> i32 = {
  (case a <_i32 b of
   | bool::True()  -> b
   | bool::False() -> a
  )
}

fun pick (arg: (i32, i32)) -> i32 = {
  let (i, _) = arg in
  i
}

type my_list('a) =
 | Null
 | Cons of 'a * my_list<'a>

fun cons <'a> (e: 'a, l: my_list<'a>) -> my_list<'a> = {
  (case l of
   | my_list::Null()     -> my_list::Cons(e, my_list::Null())
   | my_list::Cons(h, t) -> my_list::Cons(e, l))
}

format {
  NTVec nv { v: [byte] } :=
    (b=Byte { nv.v := [b] })^(1u +_u 0u *_u 0u);;

  DepVec dv { val: [byte] } :=
    c=Byte
    dummy={ ;; c }
    v=(Byte ^ Usize.of_byte(c))
    { dv.val := v }
}
