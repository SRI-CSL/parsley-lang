type map ('a, 'b) = [ ('a, 'b) ]
type set ('a) = ['a]

type pdfobj = int
type obj_ctxt = map<(int, int), pdfobj>

type tree =
   Node of tree * int * tree
 | Leaf of int

fun max (a : int, b: int) -> int = {
  (case a < b of
   | bool::True  -> b
   | bool::False -> a
  )
}

fun pick (arg : (int, int)) -> int = {
  let (i, _) = arg in
  i
}

type my_list('a) =
   Null
 | Cons of 'a * my_list<'a>

fun cons <'a> (e: 'a, l : my_list<'a>) -> my_list<'a> = {
  (case l of
   | my_list::Null()     -> my_list::Cons(e, my_list::Null())
   | my_list::Cons(h, t) -> my_list::Cons(e, l))
}

format {
  DepVec dv { val: [byte] } :=
    c=Byte
    dummy={ c }
    v=(Byte ^ int_of_byte(c))
    { dv.val := v }
}
