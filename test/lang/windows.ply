format {
  P1 := (# ["0" .. "9"]* #);;
  P2 := (# ["0" .. "9"]* #);;

  ParseTwice pt { p1: [byte], p2: [byte]} :=
    w={ ;; View.get_current() }
    v={ ;; View.clone(w) }
    p1=@[w, P1]
    p2=@[v, P2]
    { pt.p1 := p1; pt.p2 := p2 }
}

format {
  LetterFill lf (o: int, n : int) {s: [byte], t: [byte]} :=
    v = { ;; View.get_current() }
    w = { ;; View.restrict(v, o, n) }
    next = { ;; View.restrict_from(v, n) }
    s=@[w, (# ["0" .. "9"]* [" "]* #)]
    { lf.s := s }
    @^[next]
    //t=@[next, (# ["0" .. "9"]* [" "]* #)]
    // The below is equivalent to the commented line above.
    t=(# ["0" .. "9"]* [" "]* #)
    { lf.t := t };;

  Letters ls {ls: [byte], lt: [byte]} :=
    l=LetterFill<n=3,o=0> {ls.ls := l.s; ls.lt := l.t}
}

format {
  OffsetTest ot {a: int, b:int} :=
    a={ ;; View.get_current_cursor() }
    !"AA"!
    b={ ;; View.get_current_cursor() }
    { ot.a := a; ot.b := b }
}

//format {
//  CatStream (a: Vector<byte>, b: Vector<byte>) {} :=
//    w={ View.make(Vector.concat([a; b])) }
//    @[w, !"AA"!]
//    {}
//}
