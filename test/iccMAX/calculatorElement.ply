const type_signature_str : string = String.of_literal("calc")
const zero_int : int = 0

type position_number = {
  offset: int,
  size: int
}

type cee_type = {
  p: int,
  q: int,
  e: int,
  main_function_position: position_number
}

format {
  CalculatorElementEncoding cee {cee_type} :=
    type_signature = !"type_signature_str"!
    zero_uint32 = UInt32<endian=endian::Big()>
    [zero_uint32 = zero_int]  
    p = UInt16<endian=endian::Big()>
    q = UInt16<endian=endian::Big()>
    e = UInt32<endian=endian::Big()>
    position_number_offset = UInt32<endian=endian::Big()>
    position_number_size = UInt32<endian=endian::Big()>
    { 
      cee.p := p;
      cee.q := q;
      cee.e := e;
      cee.main_function_position.offset := position_number_offset;
      cee.main_function_position.size := position_number_size
    }

    // to do: sub-element positions
    // to do: data for calculator element
}
