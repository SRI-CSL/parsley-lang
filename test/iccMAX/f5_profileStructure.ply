// This file corresponds to the general profile structure
// It captures Figure 5 on page 16 of the 2019 iccMAX spec.

// This also serves as the entry point to the parsing

use aux

type sig_type = [byte]

type tag_ent = {
  tag_ent_sig : [sig_type],
  tag_ent_off : int,
  tag_ent_siz : int
}

type tag_tab_typ = {
  tag_tab_cnt : int,
  tag_tab_ents : [tag_ent] 
}

type gen_pro_typ = {
  hdr : [byte],
  tab : tag_tab_typ
}

recfun ext_views (tag_ents: [tag_ent]) -> [view] = {
  (case tag_ents of 
    | [] ->  []
    | first :: rest ->
        View.restrict(View.get_current(),
                      first.tag_ent_off,
                      first.tag_ent_siz) 
        :: ext_views(rest)
  )
}

recfun val_sigs (tte: [tag_ent], sigs: [sig_type]) -> bool = {
  (case tte of 
    | tte1_first :: tte1_rest ->
       ( case sigs of
          | first_sig :: rest_sigs -> tte1_first.tag_ent_sig = first_sig && val_sigs(tte1_rest, rest_sigs)
          | _ -> bool::False()
       )
    | [] -> bool::True()
  )          
}


format {

  // this non-terminal corresponds to processing Figure 5
  ParseFile gpt {gen_pro_typ} :=
    
    // parse header and tag table
    hdr = (Byte^128)
    tag_tab_cnt = UInt32<endian=endian::Big()>
    tag_tab_ents = (TagEntry^tag_tab_cnt)
    tag_tab = TagTable
    {
      gpt.hdr := hdr;
      gpt.tab := tag_tab
    }
    views = {;; ext_views(gpt.tab.tag_tab_ents)}
    sigs = @#[views, ProcessEntry]
    //[val_sigs(tag_tab_ents, sigs)]
    ;;

  // placeholder
  ProcessEntry pe {sig: sig_type} := 
    bytes = (Byte^4)
    {
      pe.sig := bytes
    }
    ;;

  TagTable tt {tag_tab_typ} :=
    tt_cnt = UInt32<endian=endian::Big()>
    tt_ents = (TagEntry^tt_cnt)
    {
      tt.tag_tab_cnt := tt_cnt;
      tt.tag_tab_ents := tt_ents
    };;
    
  TagEntry te {tag_ent} :=
    tag_ent_sig = (Byte^4) // something like: \x05\x03
    tag_ent_off = UInt32<endian=endian::Big()>
    tag_ent_siz = UInt32<endian=endian::Big()>
    {
      te.tag_ent_sig := tag_ent_sig;
      te.tag_ent_off := tag_ent_off;
      te.tag_ent_siz := tag_ent_siz
    }
}
