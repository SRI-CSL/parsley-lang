// import basic types
include datatypes

// TABLE 1 NITF FILE HEADER. pg. 15 of NITF spec
// type image_segment_tuple = {
//     lishn: [byte],
//     lin: [byte]
// }

// NITF packet type
type nitf_packet = {
    // NITF header starts here
    fhdr: [byte],
    fver: [byte],
    clevel: [byte],
    stype: [byte],
    ostaid: [byte],
    fdt: [byte]
    // ftitle: [byte]
    // fsclas: [byte],
    // fsclsy: [byte],
    // fscode: [byte],
    // fsctlh: [byte],
    // fsrel: [byte],
    // fsdctp: [byte],
    // fsdcdt: [byte],
    // fsdcxm: [byte],
    // fsdg: [byte],
    // fsdgdt: [byte],
    // fscltx: [byte],
    // fscatp: [byte],
    // fscaut: [byte],
    // fscrsn: [byte],
    // fssrdt: [byte],
    // fsctln: [byte],
    // fscop: [byte],
    // fscpys: [byte],
    // encryp: [byte],
    // fbkgc: [byte],
    // oname: [byte],
    // ophone: [byte],
    // fl: [byte],
    // hl: [byte],
    // numi: [byte]

    // image segment subheader + image segment header len start here
    // image_segment_tuple : [image_segment_tuple]
}


// fun str_to_int(b: [byte]) -> usize {
//    // try list.nth
//    b[2] +_u (b[1] *_u 256u) +_u (b[0] * 256u)
// }

format {
    // Table 1 of NITF spec.
    FHDR := !"NITF"!;;
    FVER := !"02.00"!;;

    CLEVEL := (# ["0" .. "9"] ^ 2u#);;

    // STYPE := !"BF01"!;;
    // relaxed version:
    STYPE := (# BCS_A ^ 4u #);;

    // This field shall contain the identification code or name of the
    // originating organization, system, station, or product.
    // It shall not be filled with BCS spaces (0x20). size 10.
    OSTAID := (# BCS_A ^ 10u #);;

    FDT := (#["0" .. "9"] ^ 14u #);;

    FSCLAS := (#["T"|"S"|"C"|"R"|"U"]#);;

    // TOOD: if any other populated with a valid code for the security
    // classification system used: FSCODE, FSCTLH, FSREL, FSDCTP,
    FSCLSY := (# ECS_A ^ 2u #);;
    FSCODE := (# ECS_A ^ 11u #);;
    FTITLE := (# ECS_A ^ 80u #);;
    FSCTLH := (# ECS_A ^ 2u #);;
    FSREL := (# ECS_A ^ 20u #);;
    FSDCTP := (# ["DD" | "DE" | "GD" | "GE" | "O" | "X" | "\x20\x20"] #);;
    CCYYMMDD := (# ["00".."99"] // CC
                 ["00".."99"] // YY
                 (["0"]["0".."9"]|["1"]["0".."2"])  // MM
                 (["0"]["1".."9"] |
                  ["1" .. "2"]["0" .. "9"] |
                  ["3"]["0" .. "1"]) // DD
                 #);;
    FSDCDT := (# CCYYMMDD | ["\x20"]* #);;
    FSDCXM := (# (["X"]["1".. "8"] ) |
                 (["25X"]["1" .. "9"]) |
                 ["DINO"]|
                 ["\x20"]*
               #);;
    FSDG := (# ["S" | "C" | "R" | "\x20"] #);;
    FSDGDT := (# CCYYMMDD | ["\x20"]* #);;
    FSCLTX := (# ECS_A ^ 43u #);;
    FSCATP := (# ["O" | "D" | "M" | "\x20"] #);;
    FSCAUT := (# ECS_A ^ 40u #);;
    FSCRSN := (# ["A" .. "H"] | ["\x20"] #);;
    FSSRDT := (# CCYYMMDD | ["\x20"]* #);;
    FSCTLN := (# ECS_A ^ 15u #);;
    FSCOP := (# ["00000" .. "99999"] #);;
    FSCPYS := (# ["00000" .. "99999"] #);;
    ENCRYP := !"\x30"!;;
    FBKGC := (# ["\x00" .. "\xFF"] ^ 3u #);;
    ONAME := (# ECS_A ^ 24u #);;
    OPHONE := (# ECS_A ^ 18u #);;
    FL := (# ["000000000388" .. "999999999998"]#);;
    HL := (# ["000388" .. "999999"]#);;
    NUMI := (# ["0" .. "9"] ^ 3u #);; // ask

    LISHn := (# ["000439" .. "999999"] #);;
    LIn := (# ["0000000001" .. "9999999999"] #);;


    NITFpacket npkt {n: nitf_packet} :=
    fhdr = FHDR
    {npkt.n.fhdr   := fhdr}

    fver = FVER
    {npkt.n.fver   := fver}

    clevel = CLEVEL
    {npkt.n.clevel := clevel}

    stype = STYPE
    [List.length(stype) = 4u]
    {npkt.n.stype  := stype}

    ostaid = OSTAID
    [ostaid != "          "]
    {npkt.n.ostaid := ostaid}

    fdt = FDT
    [List.length(stype) = 14u]
    {npkt.n.fdt    := fdt}

    // ftitle = FTITLE
    // fsclas = FSCLAS
    // fsclas = (Byte^01u)
    // // ask: if fsclas is not U then FSCLSY cannot be spaces
    // fsclsy = FSCLSY
    // fsclsy = (Byte ^02u)
    // fscode = FSCODE
    // fscode = (Byte^11u)
    // fsctlh = FSCTLH
    // fsctlh = (Byte^2u)
    // fsrel = FSREL
    // fsrel = (Byte^20u)
    // fsdctp = FSDCTP
    // fsdcdt = FSDCDT
    // fsdcxm = FSDCXM
    // fsdg   = FSDG
    // fsdgdt  = FSDGDT
    // fscltx = FSCLTX
    // fscatp = FSCATP
    // fscaut = FSCAUT
    // fscrsn = FSCRSN
    // fssrdt = FSSRDT
    // fsctln = FSCTLN
    // fscop  = FSCOP
    // fscpys = FSCPYS
    // encryp = ENCRYP
    // fbkgc  = FBKGC
    // oname  = ONAME
    // ophone = OPHONE
    // fl     = FL
    // hl     = HL
    // numi   = NUMI
    // {
    //    //  npkt.n.ftitle := ftitle;
    //    //  npkt.n.fsclas := fsclas;
    //    //  npkt.n.fsclsy := fsclsy;
    //    //  npkt.n.fscode := fscode;
    //    //  npkt.n.fsctlh := fsctlh;
    //    //  npkt.n.fsrel  := fsrel;
    //    //  npkt.n.fsdctp := fsdctp;
    //    //  npkt.n.fsdcdt := fsdcdt;
    //    //  npkt.n.fsdcxm := fsdcxm;
    //    //  npkt.n.fsdg   := fsdg;
    //    //  npkt.n.fsdgdt := fsdgdt;
    //    //  npkt.n.fscltx := fscltx;
    //    //  npkt.n.fscatp := fscatp;
    //    //  npkt.n.fscaut := fscaut;
    //    //  npkt.n.fscrsn := fscrsn;
    //    //  npkt.n.fssrdt := fssrdt;
    //    //  npkt.n.fsctln := fsctln;
    //    //  npkt.n.fscop  := fscop;
    //    //  npkt.n.fscpys := fscpys;
    //    //  npkt.n.encryp := encryp;
    //    //  npkt.n.fbkgc  := fbkgc;
    //    //  npkt.n.oname  := oname;
    //    //  npkt.n.ophone := ophone;
    //    //  npkt.n.fl     := fl;
    //    //  npkt.n.hl     := hl;
    //    //  npkt.n.numi   := numi
    //    //  // // image segments start here
    //    //  // for i .. numi {
    //    //  //     image_segment_tuple.lishn := LISHn;;
    //    //  //     image_segment_tuple.lin := LIn;;
    //    //  // }
    // }
}
