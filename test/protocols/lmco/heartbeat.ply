fun convert(b : [byte]) -> int = {
  (case Int.of_bytes(b) of
   | option::Some(i) -> i
   | option::None()  -> 0)
}

use header

type heartbeat_payload = 
                { hbp_custom_mode: int,
                hbp_typ : int,
                hbp_autopilot: int,
                hbp_base_mode: int,
                hbp_system_status: int, 
                hbp_mavlink_version: int }

format {
    

HeartBeatPayload pld { heartbeat_payload } :=

    custom_mode=(Byte ^ 4)
    typ=Byte
    autopilot=Byte
    base_mode=Byte
    system_status=Byte
    mavlink_version=Byte
    {
        // Reverses a List
        // This field is supposed to be little endian, 
        // whereas convert is big endian
        pld.hbp_custom_mode := convert(List.rev(custom_mode));
        pld.hbp_typ := Int.of_byte(typ);
        pld.hbp_autopilot := Int.of_byte(autopilot);
        pld.hbp_base_mode := Int.of_byte(base_mode);
        pld.hbp_system_status := Int.of_byte(system_status);
        pld.hbp_mavlink_version := Int.of_byte(mavlink_version)
    }
    ;;


Heartbeat hb {  hb_header: headertype,
                hb_payload: heartbeat_payload
             } := 
    header=MavlinkHeader
    payload=HeartBeatPayload
    [header.payload_length = 9 && header.message_id = 0]
    {
      hb.hb_header := header;
      hb.hb_payload := payload
    }
}
