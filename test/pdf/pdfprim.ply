// The basic object primitives.
//
// These are 'basic' in the sense that they do not contain nested
// objects.
//
// The Parsley definitions essentially use regular expression syntax,
// except for LitString, which implements a simple CFG.

fun normalize_name (s : [byte]) -> string = {
  // TODO
  String.empty
}

format {

  // Parsers are provided in the standard library for primitives
  // such as AsciiChar for ASCII characters, U8 for unsigned bytes, etc.

  // We use syntax like (AsciiChar \ "(") for set difference.  To specify
  // literals directly in a production, we quote them within a matched
  // !! pair.  Regular expression constructions need to be enclosed
  // within (# #), and when bound to an identifier have a byte-vector
  // value.

  // The 'Comment' non-terminal will have a byte vector type.
  Comment := !"%"! (# [AsciiCharS \ "\n" ]* #) !"\n"!;;

  // The 'Whitespace' non-terminal has a boolean inherited attribute
  // 'allow_empty', which is used within constraint expressions that
  // are enclosed in [].  It has a byte-vector value.
  Whitespace w (allow_empty : bool) :=
    [allow_empty]
    (# ( [" " | "\0" | "\t" | "\r" | "\n" | "\x0c"] | Comment )* #)
  ; [!allow_empty]
    (# ( [" " | "\0" | "\t" | "\r" | "\n" | "\x0c"] | Comment )* #)
  ;;

  // The 'Name' non-terminal has a synthesized attribute 'val' that
  // contains the string-valued name without the leading '/'.
  Name n { nm : string } :=
    !"/"! s=AlphaNumS+
    { n.nm := normalize_name(s) }
  ;;

  Boolean b {b : bool} :=
    !"true"!  { b.b := bool::True() }
  ;
    !"false"! { b.b := bool::False() }
  ;;

  Null := !"null"!;;

  // Bounded repetition (e.g. N times) of a non-terminal 'NT' can be
  // specified by (NT ^ N), where N has to have an integer value.
  // RawStream is given an inherited attribute 'len' that controls how
  // long the payload is.
  RawStream rs (len : int) {bytes : [byte]} :=
    (# ["stream"] ["\n" | "\r\n"] #)
    b=(Byte ^ len)
    (# ["\r" | "\n" | "\r\n"]
       ["endstream"] #)
    { rs.bytes := b } ;;

  HexString hs {hs : [byte]} :=
    !"<"!
    ( h1=HexChar h2=HexChar
      { hs.hs := byte_of_int_unsafe((Int.of_byte(h1)*16 + Int.of_byte(h2))) :: hs.hs }
    )*

    ( h=HexChar
      { hs.hs := byte_of_int_unsafe(Int.of_byte(h1) * 16) :: hs.hs}
    )?
    !">"!
    { hs.hs := List.rev(hs.hs) }
    ;;

  // The below syntax essentially implements a simple CFG for strings with
  // balanced parentheses, using recursion.
  LitString ls { ls : [byte] } :=
      !"("!
        prefix=(# [AsciiCharS \ "("]* #)
        n=LitString
        suffix=(# [AsciiCharS \ "("]* #)
      !")"!
       { ls.ls := "(" @ prefix @ n.ls @ suffix @ ")" } ;

      !"("!
        prefix=(# [AsciiCharS \ "("]* #)
        p=LitString
        midfix=(# [AsciiCharS \ "("]* #)
        q=LitString
        suffix=(# [AsciiCharS \ "("]* #)
      !")"!
      { ls.ls := "(" @ prefix @ p.ls @ midfix @ q.ls @ suffix @ ")" } ;

      $epsilon                   // Parsley keyword

    ;;

  // A PDF String is one of the above two string objects.
  String s {val : [byte]} :=
    h=HexString { s.val := h.hs }
  ;
    l=LitString { s.val := l.ls }
  ;;

  // Int.of_bytes() is a function in the Parsley standard library.
  // The _unsafe() version could be used if since we can be certain
  // that the string indeed contains a value convertible to an integer.
  Integer i { i : int } :=
    n=(# DigitS+ #)             { i.i := Int.of_bytes_unsafe(n)  }
  ;
    !"-"! n=(# DigitS+ #) { i.i := -Int.of_bytes_unsafe(n) }
  ;;

  // TODO: we might need to have a user-defined type for PDF reals,
  // since they are not defined in terms of IEEE 754.
  Real r { r : double } :=
    n=(# DigitS+ #)
    { r.r := Double.of_bytes_unsafe(n)  }
  ;
    !"-"! n=(# DigitS+ #)
    { r.r := Double.of_bytes_unsafe("-" @ n) }
  ;
    n=(# DigitS+ #) !"."! f=(# DigitS+ #)
    { r.r := Double.of_bytes_unsafe(n @ "." @ f) }
  ;
    !"-"!  n=(# DigitS+ #) !"."! f=(# DigitS+ #)
    { r.r := Double.of_bytes_unsafe("-" @ n @ "." @ f) }

}
