// Top-level document syntax.

include {pdfprim, pdfobj}

type xr_free     = { xr_next: int }
type xr_inuse    = { xr_file_ofs: int }
type xr_instream = { xr_stream_obj: int, xr_obj_index: int }

type xr_status =
  | Free of xr_free
  | InUse of xr_inuse
  | InStream of xr_instream

type xref_ent =
  { xr_obj: int,
    xr_gen: int,
    xr_status: xr_status }

type xref_ssect =
  { xss_start: int, xss_count: int, xss_ents: [xref_ent] }

type xref_sect =
  { xs_sects: [xref_ssect] }

// Construct the views for top-level indirect objects.
fun inuse_ent_offsets(e: xref_ent) -> [int] = {
  (case e.xr_status of
   | xr_status::InUse(iu) -> [iu.xr_file_ofs]
   | _ -> []
  )
}
fun top_ssect_offsets(ss: xref_ssect) -> [int] = {
  List.flatten(List.map(inuse_ent_offsets, ss.xss_ents))
}
fun top_sect_offsets(s: xref_sect) -> [int] = {
  List.flatten(List.map(top_ssect_offsets, s.xs_sects))
}
fun top_views(s: xref_sect, base: view) -> [view] = {
  let offs = top_sect_offsets(s) in
  let b = List.repl(base, List.length(offs)) in
  List.map2(View.restrict_from, b, offs)
}

format {
  Header h { version: [byte],
             binary:  option<[byte]> }
  :=
    v=Comment  b=Comment?
    { h.version := v;
      h.binary  := b }
  ;;

  // Straight-line parser that does not use xref table.
  #[whitespace(Whitespace:allow_empty=true)]
  Body b (ctxt: parse_ctxt) {body: [indirect_obj] := []} :=
    ( i=Indirect<ctxt = ctxt>
      { b.body := i :: b.body }
    )*
  ;;

  // View-based parser using the xref table.
  TopObjs t (ctxt: parse_ctxt, s: xref_sect) { top_objs: [indirect_obj] } :=
    views={;; top_views(s, View.get_base()) }
    objs=@#[views, Indirect<ctxt = ctxt>]
    { t.top_objs := objs }
  ;;

  // XRef entries in Xref table
  XrefEnt e (idx: int) { xref_ent } :=
    n=(# DigitS ^ 10 #) !" "!
    g=(# DigitS ^ 5 #) !" "!
    [ Int.of_bytes_unsafe(g) <= 65535 ]

    (( !"n"!
       { let iu = { xr_file_ofs: Int.of_bytes_unsafe(n) } in
         e.xr_status := xr_status::InUse(iu) } )
     |
     ( !"f"!
       { let f = { xr_next: Int.of_bytes_unsafe(n) } in
         e.xr_status := xr_status::Free(f) }
     ))

    ( !" \r"! | !" \n"! | !"\r\n"! )
    { e.xr_obj := idx;
      e.xr_gen := Int.of_bytes_unsafe(g) }
  ;;

  XrefSubSect ss { xref_ssect } :=
  (| i: int := 0 |)                     // temporary used as counter
  { ss.xss_ents := [] }

  start=(# DigitS+ #) !" "!
  [ Int.of_bytes(start) ~~ option::Some ]
  { i := Int.of_bytes_unsafe(start) }   // initialize the object counter

  count=(# DigitS+ #)
  [ Int.of_bytes(count) ~~ option::Some ]

  ( !" \r"! | !" \n"! | !"\r\n"! )      // unclear in the spec

  (xe=XrefEnt<idx = i>
   { ss.xss_ents := xe :: ss.xss_ents;
     i := i + 1 }                       // increment counter for next object
  ) ^ (Int.of_bytes_unsafe(count))

  { ss.xss_ents  := List.rev(ss.xss_ents);
    ss.xss_start := Int.of_bytes_unsafe(start);
    ss.xss_count := Int.of_bytes_unsafe(count) }
  ;;

  #[whitespace(Whitespace:allow_empty=true)]
  XrefSect xs { xref_sect } :=
  { xs.xs_sects := [] }

  !"xref"!  PDF_EOL
  (ss=XrefSubSect { xs.xs_sects := ss :: xs.xs_sects }) *
  { xs.xs_sects := List.rev(xs.xs_sects) }
  ;;

  #[whitespace(Whitespace:allow_empty=true)]
  Trailer t {tdict: dict} :=
    !"trailer"! d=Dict
    { t.tdict := d.d }
  ;;

  #[whitespace(Whitespace:allow_empty=false)]
  StartXref s {sxref: int} :=
    !"startxref"!
    n=Integer
    [ n.i > 0 ]
    { s.sxref := n.i }
  ;;

  EOF {} :=
    !"%%EOF"!
}
