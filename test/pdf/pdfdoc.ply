// Top-level document syntax.

use {pdfprim, pdfobj}

type xref_status =
    Free of { next : int }
  | InUse of { file_ofs : int }

type xref_ent =
  { obj : int,
    gen : int,
    status : xref_status }

format {
  Header h { version : commentT,
             binary  : option<commentT> }
  :=
    v=Comment  b=Comment?
    { version := v;
      binary  := b
    }
  ;;

  Body b (ctxt : obj_ctxt) { body: [indirectT] } :=
    ( i=Indirect<ctxt = b.ctxt>
      { b.body := List.append(b.body, i) }
    )*
  ;;

  // This whitespace attribute does not apply inside XrefSubSect,
  // i.e. inside any non-terminal on the right-hand-side of the
  // production.
  #[whitespace(Whitespace:allow_empty=true)]
  XrefSect x { sects: [xrefSubSectT] } :=
    !"xref"!
    ( s=XrefSubSect
      { x.sects := List.append(x.sects, s) }
    )*
  ;;

  // There is no implicit whitespace between the entities on the
  // right-hand-side of the production.  All whitespace hence has to
  // be explicitly specified.
  #[whitespace(none)]
  XrefSubSect x {start: int, count: int, ents: [xrefEntT] }
  :=
    (| i : int |)  // entry loop counter

    s=Integer [ s.val >= 0 ]
    !" "!
    c=Integer [ s.val >  0 ]
    (# ["\r" | "\n" | "\r\n"] #)

    { x.start := s.val;
      x.count := c.val }

    ( e=XrefEnt<idx = i>
      [ List.length(x.ents) < x.count ]
      { x.ents := List.append(x.ents, e);
        i := i + 1 }
    )*

    // Ensure we got the specified number of entries.
    [ List.length(x.ents) = x.count ]
  ;;

  // There is no implicit whitespace between the entities on the
  // right-hand-side of the production.
  #[whitespace(none)]
  XrefEnt x (idx : int) { xref_ent }
  :=
    o=(Digit ^ 10) !" "! g=(Digit ^ 5)
    { x.obj := x.idx;
      x.gen := string_to_int(g) }
    (( !" n"!
       { x.status :=
           let file_ofs = string_to_int(o) in
           xref_status::InUse({ file_ofs: file_ofs }) }
     )
    |
     ( !" f"!
       { // TODO: Ensure that object 0 is free (and is the first entry?).
         x.status :=
           let next = string_to_int(o) in
           xref_status::Free({ next: next }) }
     )
    )
    !"\r\n"!
  ;;

  #[whitespace(Whitespace:allow_empty=true)]
  Trailer t {dict: dictT} :=
    !"trailer"! d=Dict
    { t.dict := d }
  ;;

  #[whitespace(Whitespace:allow_empty=false)]
  StartXref s {val : int} :=
    !"startxref"!
    n=Integer
    [ n.val > 0 ]
    { s.val := n.val }
  ;;

  EOF {} :=
    !"%%EOF"!
}
