format PDFDoc
{
  // Use the constructs sketched in pdfobj-sketch.txt.  This includes both non-terminals
  // as well as types.

  use PDFCompoundObj:{CommentObj, IndirectObj, PDFObj, DictObj, IntegerObj, obj_ctxt} ;;

  // Syntax for user type definitions.
  // We need to define the supported type language.
  type xref_t = Free of () | Inuse of () ;;

  // ctxt is an inherited attributed of Doc below, while the others (header .. startxref)
  // are synthesized attributes.  Inherited attributes are declared within (), while
  // synthesized attributes are declared within {}.
  //
  // A non-terminal in a production rule is provided the values of its inherited attributes
  // within <>, as in the calls to Body and Trailer below.

  Doc d (ctxt : obj_ctxt) { header: Header, body: Body, xref: [Xref], trailer: [Trailer], startxref: int } :=

    h=Header b=Body<ctxt = d.ctxt> x=Xref t=Trailer<ctxt = d.ctxt> s=StartXref e=EOF

    { d.header    := h;
      d.body      := b;
      d.xref      := d.xref.append(x);
      d.trailer   := d.trailer.append(t);
      d.startxref := s.val
    } ;;

Header h { version: typeof(CommentObj),
           binary: option(typeof(CommentObj)) } :=

    v=CommentObj b=CommentObj?
    // '?' is a builtin that creates an option-type

    { version := v;
      binary  := b  // type-checks since b is an option value
    } ;;

Body b (ctxt : obj_ctxt) { body: [PDFObj] } :=

    ( o=PDFObj<ctxt = b.ctxt> [ o ~~ IndirectObj ] { b.body := b.body.append(o) } )* ;;

    // The constraint ensures that the top-level objects are all
    // indirect objects.  Note that the parsing action here is
    // entirely contained within the Kleene star group.

XrefSect x { sects: [XrefSubSect] } :=

    'xref' ( s=XrefSubSect { x.sects := x.sects.append(s) } )* ;;

XrefSubSect x { start: int, count: int, ents: [XrefEnt] } :=
    // The spec is not clear whether there is any leading or trailing non-EOL whitespace

    s=IntegerObj [ s.val >= 0 ]
    c=IntegerObj [ s.val >  0 ]

    '\n'  // EOL-type is not specified in the spec.

    { x.start := s.val;
      x.count := c.val }

    ( e=XrefEnt [ x.ents.len() < x.count() ] { x.ents := x.ents.append(e) } )* ;;

XrefEnt x { offset: int, gen: int, status: xfree_t } :=

    o=([[:digit:]*10]) g=([[:digit:]*5])

    // This is relatively standard regular expression syntax: [digit]
    // is the numeric character class, and ()*n is the repetition
    // construct.

    { x.offset := $string_to_int(o);
      x.gen    := $string_to_int(g);
      x.status := Inuse
    }

    // $string_to_int() is a Parsley built-in to convert strings into
    // integers.
    // [SEMANTICS: Should this function can throw a parsing exception
    // on non-numeric input? ]

    ( 'n' { x.status := Inuse }
    | 'f' { x.status := Free  }
    )

    '\r\n' // This is required to be 'a two-character end-of-line
           // sequence'.

    ;;

    // Note: interleaving of actions, parsing, and constraint checking
    // is explicitly designed to enable succinct specifications.
    // The ';' in the concrete syntax terminates the production rule.

Trailer t (ctxt : obj_ctxt) { dict: DictObj } :=

   'trailer' d=DictObj<ctxt = t.ctxt>

   { t.dict := d } ;;

StartXref s { val : int } :=

   'startxref'
   n=IntegerObj [ n.val > 0 ]

   { s.val := n.val } ;;

EOF {} :=

  '%%EOF'

}

// What's missing in the current sketch:
//
// - more explicit handling of whitespace, especially:
//   . when is it required, and when can it be empty
//   . EOLs (end-of-line markers), again, when are they required, and
//     what specific type
//
// - supporting random-access primitives
//   . needed to handle entries in cross-reference table
//
// - supporting explicit control flow (in conjunction with above)
//
//   . e.g. start with the EOF, then search backwards to StartXref,
//     extract offset for Xref, then goto that offset, parse Xref,
//     fall through to Trailer, then construct DOM
//
//   . one option: leave all random-access control flow out of
//     Parsley, and entirely up to application.  But we need to ensure
//     that parser state (e.g. currently constructed AST) is always
//     consistently maintained.
//
// - there is currently no clear syntactic distinction between
//   inherited and synthesized attributes.

// Feedback from Peter Wyatt:
//
// - cannot assume PDF integers will be representable in 64-bits
//   (Annex C).
//
// - the syntax and (perhaps also the real numbers?) used in the PDF
//   rendering and imaging expressions is completely self-contained,
//   and it should be possible to factor out into a sub-grammar.
//   There is no leakage across the boundary with the outer language.
//   Section 7.10.
//
// . EOL for xrefs are very explicitly defined in the spec.  might
//   need a xref-specific EOL definition.  Also need a way of
//   capturing the leading-zeros requirement of xref entries.
